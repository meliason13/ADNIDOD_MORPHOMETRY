## Michelle Data set

library("readxl")
MichelleProject= read_excel("/Users/michelleeliason/Desktop/ADNIDATA_TWO_ME.xlsx",col_names = TRUE) #  read the data

#Explore Data and Missing Values

summary(is.na(MichelleProject))
colSums(is.na(MichelleProject))

# Total count of missing values in the dataset
total_missing <- sum(is.na(MichelleProject))

# Percentage of missing values in the dataset
total_missing_percentage <- (total_missing / (nrow(MichelleProject) * ncol(MichelleProject))) * 100

# Print results
cat("Total Missing Values:", total_missing, "\n")
cat("Percentage of Missing Values:", round(total_missing_percentage, 2), "%", "\n")

#Convert data into a separate data from, omit all missing values
MichelleProject=data.frame(MichelleProject)
MichelleProjectclean=na.omit(MichelleProject)

# Summarize missing values for each column
col_missing <- colSums(is.na(MichelleProject))

# Print columns with missing values
print(col_missing[col_missing > 0])
variable_names <- colnames(MichelleProjectclean)[10:152]

# Find all variable names that end with "TA" and "SA", create shortcut for SA + TA
MichelleProject_TAnames <- grep("TA$", variable_names, value = TRUE)
head(MichelleProject_SATAnames)
print(MichelleProject_TAnames)

MichelleProject_SAnames <- grep("SA$", variable_names, value = TRUE)
MichelleProject_SATAnames <- grep("(SA|TA)$", variable_names, value = TRUE)

# Shortcut for TA, SA + Initial Independent Variables. Modify this to remove Categorical Variables 1-3
MichelleProject_TA <- MichelleProjectclean[, c("COHORT", names(MichelleProjectclean[4:8]), MichelleProject_TAnames)]
MichelleProject_SA <- MichelleProjectclean[, c("COHORT", names(MichelleProjectclean[4:8]), MichelleProject_SAnames)]

colnames(MichelleProject_TA)

#Define TA TBI data
MP_TAtbi = MichelleProject_TA[MichelleProject_TA$COHORT == 2, ]

# Define TA Control data
MP_TAcontrol <- MichelleProject_TA[MichelleProject_TA$COHORT == 3, ]

# Define SA TBI data
MP_SAtbi <- MichelleProject_SA[MichelleProject_SA$COHORT == 2, ]

# Define SA Control data
MP_SAcontrol <- MichelleProject_SA[MichelleProject_SA$COHORT == 3, ]


colnames(MP_SAcontrol)
print(MP_SAcontrol)

# Subset MichelleProject using the predefined variable names for TA and SA
MichelleProject_TAcodes <- MichelleProject[, MichelleProject_TAnames]
MichelleProject_SAcodes <- MichelleProject[, MichelleProject_SAnames]

variable_names <- colnames(MichelleProjectclean)[10:152]


# KMO Updated TA Groups
tbi_data_TA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, c("ST105TA", "ST109TA", "ST43TA", "ST119TA", "ST82TA", "ST104TA", "ST32TA", "ST74TA", "ST83TA", "ST121TA", "ST26TA", "ST51TA", "ST93TA", "ST23TA", "ST15TA", "ST39TA", "ST95TA", "ST55TA", "ST35TA", "ST36TA", "ST106TA", "ST108TA", "ST97TA", "ST62TA", "ST94TA", "ST111TA", "ST45TA", "ST52TA", "ST99TA", "ST115TA", "ST47TA", "ST56TA", "ST31TA", "ST102TA", "ST58TA", "ST90TA", "ST85TA", "ST117TA", "ST49TA", "ST59TA", "ST38TA", "ST40TA", "ST91TA", "ST116TA", "ST46TA", "ST57TA", "ST72TA", "ST118TA")]
control_data_TA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, c("ST105TA", "ST109TA", "ST43TA", "ST119TA", "ST82TA", "ST104TA", "ST32TA", "ST74TA", "ST83TA", "ST121TA", "ST26TA", "ST51TA", "ST93TA", "ST23TA", "ST15TA", "ST39TA", "ST95TA", "ST55TA", "ST35TA", "ST36TA", "ST106TA", "ST108TA", "ST97TA", "ST62TA", "ST94TA", "ST111TA", "ST45TA", "ST52TA", "ST99TA", "ST115TA", "ST47TA", "ST56TA", "ST31TA", "ST102TA", "ST58TA", "ST90TA", "ST85TA", "ST117TA", "ST49TA", "ST59TA", "ST38TA", "ST40TA", "ST91TA", "ST116TA", "ST46TA", "ST57TA", "ST72TA", "ST118TA")]

# KMO Updated SA Groups
tbi_data_SA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, c("ST23SA", "ST73SA", "ST104SA", "ST45SA", "ST113SA", "ST103SA", "ST55SA", "ST72SA", "ST34SA", "ST51SA", "ST119SA", "ST102SA", "ST57SA", "ST58SA", "ST59SA", "ST13SA", "ST114SA", "ST108SA", "ST31SA", "ST35SA", "ST111SA", "ST38SA", "ST56SA", "ST118SA", "ST47SA", "ST49SA", "ST52SA", "ST14SA", "ST115SA", "ST110SA", "ST50SA", "ST130SA", "ST32SA", "ST36SA", "ST62SA", "ST109SA", "ST39SA", "ST26SA", "ST121SA", "ST105SA", "ST40SA", "ST54SA", "ST87SA", "ST28SA")]
control_data_SA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, c("ST23SA", "ST73SA", "ST104SA", "ST45SA", "ST113SA", "ST103SA", "ST55SA", "ST72SA", "ST34SA", "ST51SA", "ST119SA", "ST102SA", "ST57SA", "ST58SA", "ST59SA", "ST13SA", "ST114SA", "ST108SA", "ST31SA", "ST35SA", "ST111SA", "ST38SA", "ST56SA", "ST118SA", "ST47SA", "ST49SA", "ST52SA", "ST14SA", "ST115SA", "ST110SA", "ST50SA", "ST130SA", "ST32SA", "ST36SA", "ST62SA", "ST109SA", "ST39SA", "ST26SA", "ST121SA", "ST105SA", "ST40SA", "ST54SA", "ST87SA", "ST28SA")]


#PRE-DEFINE COHORT GROUPS

# TA Groups
tbi_data_TA <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, MichelleProject_TAnames]
control_data_TA <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, MichelleProject_TAnames]

# SA Groups
tbi_data_SA <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, MichelleProject_SAnames]
control_data_SA <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, MichelleProject_SAnames]

#SATA Groups 

# Subset TBI and Control Groups using predefined MichelleProject_SATAnames
tbi_data_SATA <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, MichelleProject_SATAnames]
control_data_SATA <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, MichelleProject_SATAnames]


# DESCRIPTIVE STATISTICS

#No Exponentials for this Session 
options(scipen = 999)

# Function to calculate frequency and percentage for categorical variables
categorical_summary_clean <- function(data, variables) {
  result <- lapply(variables, function(var) {
    counts <- table(data[[var]])  # Pulls from the specified dataset
    percentages <- prop.table(counts) * 100
    data.frame(
      Variable = var,
      Category = names(counts),
      Count = as.numeric(counts),
      Percentage = round(as.numeric(percentages), 2)
    )
  })
  # Combine the summaries for all variables into a single data frame
  do.call(rbind, result)
}

# Specify the categorical variables in your dataset
categorical_vars_clean <- c("COHORT", "Handedness")  # Specify column names explicitly

# Ensure data is pulled from MichelleProjectclean
categorical_summary_data_clean <- categorical_summary_clean(MichelleProjectclean, categorical_vars_clean)

# Print the categorical summary
print(categorical_summary_data_clean)

# Calculate descriptive statistics Independent Variables 

library(dplyr)

# Extract variables for TBI group (COHORT == 2)
ind_var_tbi <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, names(MichelleProjectclean)[10:152]]

# Extract variables for Control group (COHORT == 3)
ind_var_control <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, names(MichelleProjectclean)[10:152]]

desc_stats_ind_var_tbi <- ind_var_tbi %>%
  summarise(across(everything(), list(
    mean = ~mean(.x, na.rm = TRUE),
    sd = ~sd(.x, na.rm = TRUE),
    median= ~median(.x, na.rm = TRUE),
    mode = ~as.numeric(names(sort(table(.x), decreasing = TRUE)[1])),
    IQR = ~IQR(.x, na.rm = TRUE)
  )))

# Transpose for readability
desc_stats_t_ind_var_tbi <- as.data.frame(t(desc_stats_ind_var_tbi))

# Calculate descriptive statistics for Control group
desc_stats_ind_var_control <- ind_var_control %>%
  summarise(across(everything(), list(
    mean = ~mean(.x, na.rm = TRUE),
    sd = ~sd(.x, na.rm = TRUE),
    median= ~median(.x, na.rm = TRUE),
    mode = ~as.numeric(names(sort(table(.x), decreasing = TRUE)[1])),
    IQR = ~IQR(.x, na.rm = TRUE)
  )))

# Transpose for readability
desc_stats_t_ind_var_control <- as.data.frame(t(desc_stats_ind_var_control))

# Print the descriptive statistics tables
print("Descriptive Statistics for TBI Group")
print(desc_stats_t_ind_var_tbi)
View(desc_stats_t_ind_var_tbi)


print("Descriptive Statistics for Control Group")
print(desc_stats_t_ind_var_control)
View(desc_stats_t_ind_var_control)


# Create Individual Box Plots
variables <- colnames(ind_var_tbi)  # Extract column names to iterate over

for (variable in variables) {
  boxplot(
    ind_var_tbi[[variable]], ind_var_control[[variable]],
    names = c("TBI", "Control"),
    col = c("orange", "yellow"),
    main = paste("Box Plot for", variable, ""),
    ylab = variable
  )
  
  # Add jitter points for TBI (group 1)
  points(
    jitter(rep(1, length(ind_var_tbi[[variable]])), amount = 0.1),  # Jitter x-coordinates
    ind_var_tbi[[variable]],  # y-coordinates
    col = "blue",             # Match TBI color
    pch = 16,                 # Solid circles
    cex = 0.7                 # Adjust point size
  )
  
  # Add jitter points for Control (group 2)
  points(
    jitter(rep(2, length(ind_var_control[[variable]])), amount = 0.1),  # Jitter x-coordinates
    ind_var_control[[variable]],  # y-coordinates
    col = "red",                  # Match Control color
    pch = 16,                     # Solid circles
    cex = 0.7                     # Adjust point size
  )
}
View(MichelleProjectclean)

# Perform Shapiro-Wilk test for all variables in the TBI group
shapiro_tbi <- lapply(ind_var_tbi, shapiro.test)

# Extract statistics and p-values for TBI group
shapiro_tbi_results <- data.frame(
  Variable = names(ind_var_tbi),
  Statistic_TBI = sapply(shapiro_tbi, function(x) x$statistic),
  P_Value_TBI = sapply(shapiro_tbi, function(x) x$p.value)
)

# Perform Shapiro-Wilk test for all variables in the Control group
shapiro_control <- lapply(ind_var_control, shapiro.test)

# Extract statistics and p-values for Control group
shapiro_control_results <- data.frame(
  Variable = names(ind_var_control),
  Statistic_Control = sapply(shapiro_control, function(x) x$statistic),
  P_Value_Control = sapply(shapiro_control, function(x) x$p.value)
)

# Combine results into a single table for comparison
shapiro_results_combined <- merge(shapiro_tbi_results, shapiro_control_results, by = "Variable")

# Print results
print("Shapiro-Wilk Test Results for Normality")
print(shapiro_results_combined)

# Optional: View results in a spreadsheet format if using RStudio
View(shapiro_results_combined)

#TTEST AND MWU FOR INDEPENDENT VARIABLES 

t_test_result <- t.test(MoCA ~ COHORT, data = MichelleProjectclean, 
                        var.equal = TRUE) # Use `var.equal = FALSE` if variances are unequal

# Print the results
print(t_test_result)


# Run Mann-Whitney U tests for each variable
mw_education <- wilcox.test(Education ~ COHORT, data = MichelleProjectclean, exact = FALSE)
mw_age <- wilcox.test(Age.at.Exam ~ COHORT, data = MichelleProjectclean, exact = FALSE)
mw_gds <- wilcox.test(GDS ~ COHORT, data = MichelleProjectclean, exact = FALSE)
mw_caps <- wilcox.test(CAPS ~ COHORT, data = MichelleProjectclean, exact = FALSE)

# Print results
list(
  Education = mw_education,
  Age = mw_age,
  GDS = mw_gds,
  CAPS = mw_caps
)


# Calculate descriptive statistics for TA group
library(dplyr)
desc_stats_tbi_TA <- MP_TAtbi %>%
  summarise(across(everything(), list(
    mean = ~mean(.x, na.rm = TRUE),
    sd = ~sd(.x, na.rm = TRUE),
    median= ~median(.x, na.rm = TRUE),
    mode = ~as.numeric(names(sort(table(.x), decreasing = TRUE)[1])),
    IQR = ~IQR(.x, na.rm = TRUE)
  )))

# Transpose for readability
desc_stats_t_tbi_TA <- as.data.frame(t(desc_stats_tbi_TA))

# Calculate descriptive statistics for Control group
desc_stats_control_TA <- MP_TAcontrol %>%
  summarise(across(everything(), list(
    mean = ~mean(.x, na.rm = TRUE),
    sd = ~sd(.x, na.rm = TRUE),
    median= ~median(.x, na.rm = TRUE),
    mode = ~as.numeric(names(sort(table(.x), decreasing = TRUE)[1])),
    IQR = ~IQR(.x, na.rm = TRUE)
  )))

# Transpose for readability
desc_stats_t_control_TA <- as.data.frame(t(desc_stats_control_TA))

# Print the descriptive statistics tables
print("Descriptive Statistics for TBI Group")

print(desc_stats_t_tbi_TA)
View(desc_stats_t_tbi_TA)

print("Descriptive Statistics for Control Group")
print(desc_stats_t_control_TA)
View(desc_stats_t_control_TA)


# Save the descriptive statistics for the TBI group (TA) as a CSV file
write.csv(desc_stats_t_tbi_TA, "Descriptive_Statistics_TBI_TA.csv", row.names = TRUE)

# Save the descriptive statistics for the Control group (TA) as a CSV file
write.csv(desc_stats_t_control_TA, "Descriptive_Statistics_Control_TA.csv", row.names = TRUE)


# Combine the transposed descriptive statistics tables
combined_desc_stats_TA <- cbind(
  Variable = rownames(desc_stats_t_tbi_TA),
  desc_stats_t_tbi_TA,
  desc_stats_t_control_TA
)

# Reset rownames for a clean table
rownames(combined_desc_stats_TA) <- NULL

# Print the combined descriptive statistics table
print("Combined Descriptive Statistics for TA")
print(combined_desc_stats_TA)
View(combined_desc_stats_TA)

# Combine the transposed descriptive statistics tables
combined_desc_stats_TA <- cbind(
  Variable = rownames(desc_stats_t_tbi_TA),
  desc_stats_t_tbi_TA,
  desc_stats_t_control_TA
)

# Reset rownames for a clean table
rownames(combined_desc_stats_TA) <- NULL

# Print the combined descriptive statistics table
print("Combined Descriptive Statistics for TA")
print(combined_desc_stats_TA)
View(combined_desc_statsTA)

# Create Individual Box Plots
variables <- colnames(MP_TAtbi)  # Assuming MP_TAtbi and MP_TAcontrol have the same columns

for (variable in variables) {
  boxplot(
    MP_TAtbi[[variable]], MP_TAcontrol[[variable]],
    names = c("TBI", "Control"),
    col = c("orange", "yellow"), 
    main = paste("Box Plot for", variable, "(mm)"),
    ylab = variable
  )
  
  # Add jitter points for TBI (group 1)
  points(
    jitter(rep(1, length(MP_TAtbi[[variable]])), amount = 0.1),  # Jitter x-coordinates
    MP_TAtbi[[variable]],  # y-coordinates
    col = "blue",          # Match TBI color
    pch = 16,              # Solid circles
    cex = 0.7              # Adjust point size
  )
  
  # Add jitter points for Control (group 2)
  points(
    jitter(rep(2, length(MP_TAcontrol[[variable]])), amount = 0.1),  # Jitter x-coordinates
    MP_TAcontrol[[variable]],  # y-coordinates
    col = "red",               # Match Control color
    pch = 16,                  # Solid circles
    cex = 0.7                  # Adjust point size
  )
}


# ---- Box Plots with Descriptive Names ----

# Convert to long format for ggplot
MP_TAtbi_long <- pivot_longer(MP_TAtbi, cols = everything(), names_to = "Variable_Code", values_to = "Value")
MP_TAcontrol_long <- pivot_longer(MP_TAcontrol, cols = everything(), names_to = "Variable_Code", values_to = "Value")

# Add group labels
MP_TAtbi_long$Group <- "TBI"
MP_TAcontrol_long$Group <- "Control"

# Combine both groups
MP_combined_long <- bind_rows(MP_TAtbi_long, MP_TAcontrol_long)

# Replace variable codes with full names for plotting
MP_combined_long$Variable <- ifelse(MP_combined_long$Variable_Code %in% names(full_names_TA),
                                    full_names_TA[MP_combined_long$Variable_Code],
                                    MP_combined_long$Variable_Code)

# Loop through each variable and create an individual box plot with Mean & SD on the side
for (var in unique(MP_combined_long$Variable)) {
  
  # Subset data for the current variable
  subset_data <- MP_combined_long %>% filter(Variable == var)
  
  # Calculate mean and standard deviation for each group
  summary_stats <- subset_data %>%
    group_by(Group) %>%
    summarise(
      Mean = mean(Value, na.rm = TRUE),
      SD = sd(Value, na.rm = TRUE)
    )
  
  # Convert summary statistics into a formatted text label
  summary_text <- paste0(
    "TBI: Mean = ", round(summary_stats$Mean[summary_stats$Group == "TBI"], 2), 
    ", SD = ", round(summary_stats$SD[summary_stats$Group == "TBI"], 2), "\n",
    "Control: Mean = ", round(summary_stats$Mean[summary_stats$Group == "Control"], 2), 
    ", SD = ", round(summary_stats$SD[summary_stats$Group == "Control"], 2)
  )
  
  # Create box plot for the current variable
  plot <- ggplot(subset_data, aes(x = Group, y = Value, fill = Group)) +
    geom_boxplot(alpha = 0.6, outlier.shape = NA) +  
    geom_jitter(width = 0.2, size = 1.5, aes(color = Group), alpha = 0.7) +  
    annotate("text", x = 1.5, y = max(subset_data$Value, na.rm = TRUE) * 1.1, 
             label = summary_text, size = 5, color = "black", hjust = 0) +  # Adds text to the side
    labs(title = paste("Box Plot for", var), x = "Group", y = "Measurement Value") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Print the plot
  print(plot)
}



#SHAPIRO WILK FOR CORTICAL THICKNESS -  TBI

MP_TAtbi_filtered <- MP_TAtbi[, !names(MP_TAtbi) %in% "COHORT"]

# Perform Shapiro-Wilk test for all variables in the filtered TBI group
shapiro_tbi_dep <- lapply(MP_TAtbi_filtered, shapiro.test)

# Extract statistics and p-values for TBI group
shapiro_tbi_dep_results <- data.frame(
  Variable = names(MP_TAtbi_filtered),
  Statistic_TBI_dep = sapply(shapiro_tbi_dep, function(x) x$statistic),
  P_Value_TBI_dep = sapply(shapiro_tbi_dep, function(x) x$p.value)
)

# Print results
print(shapiro_tbi_dep_results)
View(shapiro_tbi_dep_results)

#SHAPIRO WILK FOR CORTICAL THICKNESS - CONTROL  

MP_TAcontrol_filtered <- MP_TAcontrol[, !names(MP_TAcontrol) %in% "COHORT"]

# Perform Shapiro-Wilk test for all variables in the filtered TBI group
shapiro_control_dep <- lapply(MP_TAcontrol_filtered, shapiro.test)

# Extract statistics and p-values for TBI group
shapiro_control_dep_results <- data.frame(
  Variable = names(MP_TAcontrol_filtered),
  Statistic_control_dep = sapply(shapiro_control_dep, function(x) x$statistic),
  P_Value_control_dep = sapply(shapiro_control_dep, function(x) x$p.value)
)

# Print results
print(shapiro_control_dep_results)
View(shapiro_control_dep_results)


# List of variables from your dataset
variables_ta_norm <- c(
  "ST114TA", "ST105TA", "ST102TA", "ST103TA", "ST104TA", "ST106TA",
  "ST107TA", "ST108TA", "ST109TA", "ST110TA", "ST113TA", "ST129TA",
  "ST130TA", "ST13TA", "ST115TA", "ST117TA", "ST116TA", "ST14TA",
  "ST23TA", "ST15TA", "ST24TA", "ST25TA", "ST31TA", "ST26TA", "ST32TA",
  "ST34TA", "ST36TA", "ST38TA", "ST39TA", "ST43TA", "ST44TA", "ST46TA",
  "ST47TA", "ST48TA", "ST45TA", "ST54TA", "ST52TA", "ST51TA", "ST57TA",
  "ST56TA", "ST58TA", "ST59TA", "ST60TA", "ST55TA", "ST62TA", "ST74TA",
  "ST82TA", "ST72TA", "ST84TA", "ST91TA", "ST93TA", "ST95TA", "ST97TA",
  "ST98TA", "ST99TA"
)

# Loop to perform t-tests for each variable
for (variable in variables_ta_norm) {
  # Perform t-test
  t_test_result <- t.test(
    MichelleProjectclean[[variable]] ~ MichelleProjectclean$COHORT, 
    var.equal = TRUE # Change to FALSE if variances are unequal
  )
  
  # Print the results
  cat(paste("T-Test results for", variable, "\n"))
  print(t_test_result)
  cat("\n")
}

# List of variables for Mann-Whitney U test
variables_mw_TA <- c(
  "ST111TA", "ST119TA", "ST121TA", "ST118TA", 
  "ST35TA", "ST40TA", "ST49TA", "ST50TA", 
  "ST73TA", "ST83TA", "ST90TA", "ST85TA", 
  "ST94TA"
)

# Initialize an empty list to store results
mw_results_TA <- list()

# Loop through each variable and perform Mann-Whitney U test
for (variable in variables_mw_TA) {
  # Perform Mann-Whitney U test
  mw_test_TA <- wilcox.test(
    MichelleProjectclean[[variable]] ~ MichelleProjectclean$COHORT, 
    data = MichelleProjectclean, 
    exact = FALSE
  )
  
  # Store result in the list
  mw_results_TA[[variable]] <- mw_test_TA
}

# Print all results
mw_results_TA


# Calculate descriptive statistics for SA group
library(dplyr)

desc_stats_tbi_SA <- MP_SAtbi %>%
  reframe(across(everything(), list(
    mean = ~mean(.x, na.rm = TRUE),
    sd = ~sd(.x, na.rm = TRUE),
    median= ~median(.x, na.rm = TRUE),
    mode = ~as.numeric(names(sort(table(.x), decreasing = TRUE)[1])),
    IQR = ~IQR(.x, na.rm = TRUE)
  )))

# Transpose for readability
desc_stats_t_tbi_SA <- as.data.frame(t(desc_stats_tbi_SA))

# Calculate descriptive statistics for Control group
desc_stats_control_SA <- MP_SAcontrol %>%
  reframe(across(everything(), list(
    mean = ~mean(.x, na.rm = TRUE),
    sd = ~sd(.x, na.rm = TRUE),
    median= ~median(.x, na.rm = TRUE),
    mode = ~as.numeric(names(sort(table(.x), decreasing = TRUE)[1])),
    IQR = ~IQR(.x, na.rm = TRUE)
  )))

# Transpose for readability
desc_stats_t_control_SA <- as.data.frame(t(desc_stats_control_SA))

# Print the descriptive statistics tables
print("Descriptive Statistics for TBI Group")
print(desc_stats_t_tbi_SA)

print("Descriptive Statistics for Control Group")
print(desc_stats_t_control_SA)

# Save the descriptive statistics for the TBI group as a CSV file
write.csv(desc_stats_t_tbi_SA, "Descriptive_Statistics_TBI_SA.csv", row.names = TRUE)

# Save the descriptive statistics for the Control group as a CSV file
write.csv(desc_stats_t_control_SA, "Descriptive_Statistics_Control_SA.csv", row.names = TRUE)

# Combine the transposed descriptive statistics tables
combined_desc_stats_SA <- cbind(
  Variable = rownames(desc_stats_t_tbi_SA),
  desc_stats_t_tbi_SA,
  desc_stats_t_control_SA
)

# Reset rownames for a clean table
rownames(combined_desc_stats_SA) <- NULL

# Print the combined descriptive statistics table
print("Combined Descriptive Statistics for TA")
print(combined_desc_stats_SA)
View(combined_desc_stats_SA)

# Create Individual Box Plots
variables <- colnames(MP_SAtbi)


for (variable in variables) {
  boxplot(
    MP_SAtbi[[variable]], MP_SAcontrol[[variable]],
    names = c("TBI", "Control"),
    col = c("orange", "yellow"), 
    main = paste("Box Plot for", variable,""),
    ylab = variable
  )
  # Add jitter points for TBI (group 1)
  points(
    jitter(rep(1, length(MP_SAtbi[[variable]])), amount = 0.1),  # Jitter x-coordinates
    MP_SAtbi[[variable]],  # y-coordinates
    col = "blue",          # Match TBI color
    pch = 16,              # Solid circles
    cex = 0.7              # Adjust point size
  )
  
  # Add jitter points for Control (group 2)
  points(
    jitter(rep(2, length(MP_SAcontrol[[variable]])), amount = 0.1),  # Jitter x-coordinates
    MP_SAcontrol[[variable]],  # y-coordinates
    col = "red",               # Match Control color
    pch = 16,                  # Solid circles
    cex = 0.7                  # Adjust point size
  )
}

#SHAPIRO WILK FOR SURFACE AREA - CONTROL

MP_SAcontrol_filtered <- MP_SAcontrol[, !names(MP_SAcontrol) %in% "COHORT"]

# Perform Shapiro-Wilk test for all variables in the filtered TBI group
shapiro_control_dep_SA <- lapply(MP_SAcontrol_filtered, shapiro.test)

# Extract statistics and p-values for TBI group
shapiro_control_dep_results_SA <- data.frame(
  Variable = names(MP_SAcontrol_filtered),
  Statistic_control_dep_SA = sapply(shapiro_control_dep_SA, function(x) x$statistic),
  P_Value_control_dep_SA = sapply(shapiro_control_dep_SA, function(x) x$p.value)
)

# Print results
print(shapiro_control_dep_results_SA)
View(shapiro_control_dep_results_SA)



#SHAPIRO WILK FOR SURFACE AREA - TBI

MP_SAtbi_filtered <- MP_SAtbi[, !names(MP_SAtbi) %in% "COHORT"]

# Perform Shapiro-Wilk test for all variables in the filtered TBI group
shapiro_tbi_dep_SA <- lapply(MP_SAtbi_filtered, shapiro.test)

# Extract statistics and p-values for TBI group
shapiro_tbi_dep_results_SA <- data.frame(
  Variable = names(MP_SAtbi_filtered),
  Statistic_tbi_dep_SA = sapply(shapiro_tbi_dep_SA, function(x) x$statistic),
  P_Value_tbi_dep_SA = sapply(shapiro_tbi_dep_SA, function(x) x$p.value)
)

# Print results
print(shapiro_tbi_dep_results_SA)
View(shapiro_tbi_dep_results_SA)


# List of variables for the t-test
variables_ttest_SA <- c(
  "ST87SA", "ST28SA", "ST102SA", "ST103SA", "ST104SA", "ST105SA",
  "ST106SA", "ST107SA", "ST114SA", "ST116SA", "ST26SA", "ST31SA",
  "ST32SA", "ST34SA", "ST35SA", "ST36SA", "ST38SA", "ST46SA",
  "ST47SA", "ST48SA", "ST50SA", "ST51SA", "ST39SA", "ST40SA",
  "ST43SA", "ST44SA", "ST113SA", "ST119SA", "ST121SA", "ST129SA",
  "ST130SA", "ST52SA", "ST54SA", "ST55SA", "ST56SA", "ST57SA",
  "ST58SA", "ST62SA", "ST13SA", "ST23SA", "ST24SA", "ST25SA",
  "ST109SA", "ST115SA", "ST118SA", "ST111SA", "ST72SA", "ST73SA",
  "ST82SA", "ST83SA", "ST84SA", "ST91SA", "ST94SA", "ST95SA",
  "ST97SA", "ST98SA", "ST99SA", "ST117SA"
)

# Initialize an empty list to store results
ttest_results_SA <- list()

# Loop through each variable and perform t-test
for (variable in variables_ttest_SA) {
  # Perform t-test
  t_test_SA <- t.test(
    MichelleProjectclean[[variable]] ~ MichelleProjectclean$COHORT,
    var.equal = TRUE # Change to FALSE if variances are unequal
  )
  
  # Store result in the list
  ttest_results_SA[[variable]] <- t_test_SA
}

# Print all results
ttest_results_SA



# List of variables for Mann-Whitney U test
variables_mw_SA <- c(
  "ST108SA", "ST110SA", "ST45SA", "ST49SA", 
  "ST59SA", "ST60SA", "ST14SA", "ST15SA", 
  "ST74SA", "ST85SA", "ST90SA", "ST93SA"
)

# Initialize an empty list to store results
mw_results_SA <- list()

# Loop through each variable and perform Mann-Whitney U test
for (variable in variables_mw_SA) {
  # Perform Mann-Whitney U test
  mw_test_SA <- wilcox.test(
    MichelleProjectclean[[variable]] ~ MichelleProjectclean$COHORT, 
    data = MichelleProjectclean, 
    exact = FALSE
  )
  
  # Store result in the list
  mw_results_SA[[variable]] <- mw_test_SA
}

# Print all results
mw_results_SA


##Construct Validity with KMO and Bartlett Sphericity Test
install.packages("stringdist")
install.packages("psych")
install.packages("factoextra")
library (mice)
library(dplyr)
library(psych)
library(FactoMineR)
library(psych)
library(stringdist)

##Cortical Thickness KMO and Sphericity 

#Normalize (Scale) the Data

# Remove the "Group" column and scale the remaining numeric columns
Normalized_TA_GROUPS <- scale(MichelleProject_TAcodes)

# Verify the result
head(Normalized_TA_GROUPS)

# Step 5: Compute Correlation Matrix
cor_matrix_TA2 <- cor(Normalized_TA_GROUPS, use = "pairwise.complete.obs")
print("Correlation matrix computed successfully.")

# Step 6: Check for High Correlation (>0.9)
if (nrow(cor_matrix_TA2) > 0) {
  print("Highly correlated variable pairs:")
  print(cor_matrix_TA2)
} else {
  print("No high correlations (>0.9) found.")
}

# Step 7: KMO Test
# Ensure the KMO test runs without singularity errors
tryCatch({
  kmo_result_TA2 <- KMO(cor_matrix_TA2)
  print(kmo_result_TA2)
}, error = function(e) {
  print(paste("Error in KMO test:", e$message))
})


# Extract MSA values for each variable
msa_values_TA<- kmo_result_TA2$MSAi

# Identify variables with MSA >= 0.6
valid_variables_TA <- names(msa_values_TA[msa_values_TA >= 0.6])
print("Variables with MSA >= 0.6:")
print(valid_variables_TA)

# Subset the correlation matrix to include only valid variables
filtered_cor_matrix_TA <- cor_matrix_TA2[valid_variables_TA, valid_variables_TA]

# Step 2: Recompute KMO on the filtered correlation matrix
final_kmo_TA <- KMO(filtered_cor_matrix_TA)
print("Final KMO after suppressing variables with MSA < 0.6:")
print(final_kmo_TA)


# Bartlett's Sphericity Test

selected_columns_TA <- MichelleProject_TAcodes[, sapply(MichelleProject_TAcodes, is.numeric)]

# Scale the numeric columns
selected_columns_scaled_TA <- scale(selected_columns_TA)

tryCatch({
  bartlett_result_TA2 <- cortest.bartlett(cor_matrix_TA2, n = nrow(selected_columns_scaled_TA))
  print("Bartlett's Test for Sphericity:")
  print(bartlett_result_TA2)
}, error = function(e) {
  print(paste("Error in Bartlett's test:", e$message))
})

##Surface Area KMO and Sphericity 

#Normalize (Scale) the Data

# Remove the "Group" column and scale the remaining numeric columns
Normalized_SA_GROUPS <- scale(MichelleProject_SAcodes)

# Verify the result
head(Normalized_SA_GROUPS)

# Step 5: Compute Correlation Matrix
cor_matrix_SA2 <- cor(Normalized_SA_GROUPS, use = "pairwise.complete.obs")
print("Correlation matrix computed successfully.")

# Step 6: Check for High Correlation (>0.9)
if (nrow(cor_matrix_SA2) > 0) {
  print("Highly correlated variable pairs:")
  print(cor_matrix_SA2)
} else {
  print("No high correlations (>0.9) found.")
}

# Step 7: KMO Test
# Ensure the KMO test runs without singularity errors
tryCatch({
  kmo_result_SA2 <- KMO(cor_matrix_SA2)
  print(kmo_result_SA2)
}, error = function(e) {
  print(paste("Error in KMO test:", e$message))
})

# Extract MSA values for each variable
msa_values <- kmo_result_SA2$MSAi

# Identify variables with MSA >= 0.6
valid_variables <- names(msa_values[msa_values >= 0.6])
print("Variables with MSA >= 0.6:")

print(valid_variables)

# Subset the correlation matrix to include only valid variables
filtered_cor_matrix <- cor_matrix_SA2[valid_variables, valid_variables]

# Step 2: Recompute KMO on the filtered correlation matrix
final_kmo <- KMO(filtered_cor_matrix)

print("Final KMO after suppressing variables with MSA < 0.6:")
print(final_kmo)


# Bartlett's Sphericity Test

selected_columns_SA <- MichelleProject_SAcodes[, sapply(MichelleProject_SAcodes, is.numeric)]

# Scale the numeric columns
selected_columns_scaled_SA <- scale(selected_columns_SA)

tryCatch({
  bartlett_result_SA2 <- cortest.bartlett(cor_matrix_SA2, n = nrow(selected_columns_scaled_SA))
  print("Bartlett's Test for Sphericity:")
  print(bartlett_result_SA2)
}, error = function(e) {
  print(paste("Error in Bartlett's test:", e$message))
})

#PCA WITH UPDATED VARIABLES FROM KMO 

#update variables - also listed above

# Updated TA Groups
tbi_data_TA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, c("ST105TA", "ST109TA", "ST43TA", "ST119TA", "ST82TA", "ST104TA", "ST32TA", "ST74TA", "ST83TA", "ST121TA", "ST26TA", "ST51TA", "ST93TA", "ST23TA", "ST15TA", "ST39TA", "ST95TA", "ST55TA", "ST35TA", "ST36TA", "ST106TA", "ST108TA", "ST97TA", "ST62TA", "ST94TA", "ST111TA", "ST45TA", "ST52TA", "ST99TA", "ST115TA", "ST47TA", "ST56TA", "ST31TA", "ST102TA", "ST58TA", "ST90TA", "ST85TA", "ST117TA", "ST49TA", "ST59TA", "ST38TA", "ST40TA", "ST91TA", "ST116TA", "ST46TA", "ST57TA", "ST72TA", "ST118TA")]
control_data_TA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, c("ST105TA", "ST109TA", "ST43TA", "ST119TA", "ST82TA", "ST104TA", "ST32TA", "ST74TA", "ST83TA", "ST121TA", "ST26TA", "ST51TA", "ST93TA", "ST23TA", "ST15TA", "ST39TA", "ST95TA", "ST55TA", "ST35TA", "ST36TA", "ST106TA", "ST108TA", "ST97TA", "ST62TA", "ST94TA", "ST111TA", "ST45TA", "ST52TA", "ST99TA", "ST115TA", "ST47TA", "ST56TA", "ST31TA", "ST102TA", "ST58TA", "ST90TA", "ST85TA", "ST117TA", "ST49TA", "ST59TA", "ST38TA", "ST40TA", "ST91TA", "ST116TA", "ST46TA", "ST57TA", "ST72TA", "ST118TA")]

# Updated SA Groups
tbi_data_SA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, c("ST23SA", "ST73SA", "ST104SA", "ST45SA", "ST113SA", "ST103SA", "ST55SA", "ST72SA", "ST34SA", "ST51SA", "ST119SA", "ST102SA", "ST57SA", "ST58SA", "ST59SA", "ST13SA", "ST114SA", "ST108SA", "ST31SA", "ST35SA", "ST111SA", "ST38SA", "ST56SA", "ST118SA", "ST47SA", "ST49SA", "ST52SA", "ST14SA", "ST115SA", "ST110SA", "ST50SA", "ST130SA", "ST32SA", "ST36SA", "ST62SA", "ST109SA", "ST39SA", "ST26SA", "ST121SA", "ST105SA", "ST40SA", "ST54SA", "ST87SA", "ST28SA")]
control_data_SA_KMO <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, c("ST23SA", "ST73SA", "ST104SA", "ST45SA", "ST113SA", "ST103SA", "ST55SA", "ST72SA", "ST34SA", "ST51SA", "ST119SA", "ST102SA", "ST57SA", "ST58SA", "ST59SA", "ST13SA", "ST114SA", "ST108SA", "ST31SA", "ST35SA", "ST111SA", "ST38SA", "ST56SA", "ST118SA", "ST47SA", "ST49SA", "ST52SA", "ST14SA", "ST115SA", "ST110SA", "ST50SA", "ST130SA", "ST32SA", "ST36SA", "ST62SA", "ST109SA", "ST39SA", "ST26SA", "ST121SA", "ST105SA", "ST40SA", "ST54SA", "ST87SA", "ST28SA")]


#STANDARDIZE THE DATA WITH THE SCALE and CENTERS FUNCTION

tbi_data_scaled_SA <- scale(tbi_data_SA_KMO)
control_data_scaled_SA <- scale(control_data_SA_KMO)

tbi_data_scaled_TA <- scale(tbi_data_TA_KMO)
control_data_scaled_TA <- scale(control_data_TA_KMO)


dim(tbi_data_scaled_SA)  # Check dimensions of the dataset
dim(tbi_data_scaled_TA)
dim(control_data_scaled_TA)
dim(control_data_scaled_SA)



# Disable scientific notation
options(scipen = 999)

# Create a named vector to map ST codes to full names (hemisphere + region)
full_names_SA <- c(
  "ST102SA" = "Right Paracentral",
  "ST105SA" = "Right Pars Orbitalis",
  "ST108SA" = "Right Postcentral",
  "ST109SA" = "Right Posterior Cingulate",
  "ST110SA" = "Right Precentral",
  "ST111SA" = "Right Precuneus",
  "ST114SA" = "Right Rostral Middle Frontal",
  "ST115SA" = "Right Superior Frontal",
  "ST118SA" = "Right Supramarginal",
  "ST121SA" = "Right Transverse Temporal",
  "ST130SA" = "Right Insula",
  "ST26SA" = "Left Fusiform",
  "ST28SA" = "Left Hemisphere WM",
  "ST31SA" = "Left Inferior Parietal",
  "ST32SA" = "Left Inferior Temporal",
  "ST34SA" = "Left Isthmus Cingulate",
  "ST36SA" = "Left Lateral Orbitofrontal",
  "ST39SA" = "Left Medial Orbitofrontal",
  "ST40SA" = "Left Middle Temporal",
  "ST49SA" = "Left Postcentral",
  "ST50SA" = "Left Posterior Cingulate",
  "ST51SA" = "Left Precentral",
  "ST52SA" = "Left Precuneus",
  "ST54SA" = "Left Rostral Anterior Cingulate",
  "ST55SA" = "Left Rostral Middle Frontal",
  "ST56SA" = "Left Superior Frontal",
  "ST58SA" = "Left Superior Temporal",
  "ST87SA" = "Right Hemisphere WM"
)


# Load necessary libraries
library(FactoMineR)
library(factoextra)

# Step 1: Perform PCA for TBI
pca_tbi_SA_2 <- PCA(tbi_data_scaled_SA, graph = FALSE)  

# Step 2: Perform PCA for Control
pca_control_SA_2 <- PCA(control_data_scaled_SA, graph = FALSE)  

# Visualize PCA Biplots for TBI
fviz_pca_var(
  pca_tbi_SA_2,
  label = "none",
  col.var = "cos2",                     # Color by cos²
  gradient.cols = c("blue", "orange", "red"), # Gradient for cos² values
  repel = TRUE,                         # Avoid overlapping labels
  title = "SA - TBI PCA Biplot with Cos² Gradient"
)

library (ggplot2)
install.packages("ggrepel")
library(ggrepel)

# Extract variable coordinates and Cos²
pca_coords <- as.data.frame(pca_tbi_SA_2$var$coord)  # Variable coordinates
pca_cos2 <- as.data.frame(pca_tbi_SA_2$var$cos2)     # Cos² values

View (pca_cos2)

# Combine into a single dataframe
pca_df <- cbind(pca_coords, Cos2 = pca_cos2$Dim.1)

# Add variable names as a column
pca_df$Variable <- rownames(pca_df)

# Filter for Cos² > 0.5
filtered_pca_df <- pca_df[pca_df$Cos2 > 0.5, ]

# Rename columns for ggplot compatibility
colnames(filtered_pca_df)[1:2] <- c("x", "y")

filtered_pca_df$DescriptiveName <- full_names_SA[filtered_pca_df$Variable]
print(head(filtered_pca_df))

ggplot(filtered_pca_df, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +  # Use descriptive labels
  geom_segment(
    aes(x = 0, y = 0, xend = x, yend = y),  # Arrows for vector lines
    arrow = arrow(length = unit(0.2, "cm"), type = "closed"), 
    color = "darkgray", size = 0.7
  ) +
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered PCA Biplot for TBI (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )

#Visualize top contribution >.5 cos2 for SA TBI Cohort

# Extract variable contributions (loadings) for Dim.1 and Dim.2
pca_loadings <- as.data.frame(pca_tbi_SA_2$var$coord)  # Loadings for each variable
pca_loadings$Variable <- rownames(pca_loadings)  # Add variable names

# Filter the loadings for Cos² > 0.5 (same as the original filtering)
filtered_loadings <- pca_loadings[rownames(pca_loadings) %in% filtered_pca_df$Variable, ]

# Add vector lines to the plot
ggplot(filtered_pca_df, aes(x = x, y = y, label = Variable, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +
  geom_segment(
    data = filtered_loadings,
    aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),  # Arrows from (0,0) to (Dim.1, Dim.2)
    arrow = arrow(length = unit(0.2, "cm"), type = "closed"), 
    color = "darkgray", size = 0.7
  ) +
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered PCA Biplot for TBI (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )

# Create a mapping of descriptive names for the variables
filtered_pca_df$DescriptiveName <- full_names_SA[filtered_pca_df$Variable]

# Ensure there are no NAs in the descriptive labels
filtered_pca_df <- filtered_pca_df[!is.na(filtered_pca_df$DescriptiveName), ]

ggplot(filtered_pca_df, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +  # Add descriptive labels
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered SA PCA Biplot for TBI (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 11, face = "bold"),
    legend.position = "right"
  )


############### Visualize PCA Biplots for Control

# Load necessary libraries
library(FactoMineR)
library(factoextra)

fviz_pca_var(
  pca_control_SA_2,
  label = "none",
  col.var = "cos2",                     # Color by cos²
  gradient.cols = c("blue", "orange", "red"), # Gradient for cos² values
  repel = TRUE,                         # Avoid overlapping labels
  title = "SA - Control PCA Biplot with Cos² Gradient"
)

# Extract variable coordinates and Cos²
pca_coords_control <- as.data.frame(pca_control_SA_2$var$coord)  # Variable coordinates
pca_cos2_control <- as.data.frame(pca_control_SA_2$var$cos2)     # Cos² values

print (pca_cos2_control)
View (pca_cos2_control)

# Combine into a single dataframe
pca_df_control <- cbind(pca_coords_control, Cos2 = pca_cos2_control$Dim.1)

# Add variable names as a column
pca_df_control$Variable <- rownames(pca_df_control)

# Filter for Cos² > 0.5
filtered_pca_df_control <- pca_df_control[pca_df_control$Cos2 > 0.5, ]

# Rename columns for ggplot compatibility
colnames(filtered_pca_df_control)[1:2] <- c("x", "y")


ggplot(filtered_pca_df_control, aes(x = x, y = y, label = Variable, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered SA PCA Biplot for Control (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )


# Create a mapping of descriptive names for the variables
filtered_pca_df_control$DescriptiveName <- full_names_SA[filtered_pca_df_control$Variable]

# Ensure there are no NAs in the descriptive labels
filtered_pca_df_control <- filtered_pca_df_control[!is.na(filtered_pca_df_control$DescriptiveName), ]


ggplot(filtered_pca_df_control, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +  # Add descriptive labels
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered SA PCA Biplot for Control (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )


# Ensure that filtered_pca_df_control has x, y for coordinates and DescriptiveName for labels
filtered_pca_df_control$DescriptiveName <- full_names_SA[filtered_pca_df_control$Variable]

# Ensure there are no NAs in the descriptive labels
filtered_pca_df_control <- filtered_pca_df_control[!is.na(filtered_pca_df_control$DescriptiveName), ]

ggplot(filtered_pca_df_control, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  # Add vector lines from origin (0, 0) to each point
  geom_segment(aes(x = 0, y = 0, xend = x, yend = y, color = Cos2), arrow = arrow(length = unit(0.2, "cm")), size = 1) +
  # Add points at the ends of vectors
  geom_point(size = 3) +
  # Add labels for points
  geom_text_repel(size = 3, max.overlaps = 50) +
  # Color gradient for Cos² values
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  # Labels and titles
  labs(
    title = "Filtered SA PCA Biplot for Control with Vectors (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  # Minimal theme
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )


# Step 1: Perform PCA for SA TBI
pca_tbi_SA_2 <- PCA(tbi_data_scaled_SA, graph = FALSE)  

# Step 2: Perform PCA for Control
pca_control_SA_2 <- PCA(control_data_scaled_SA, graph = FALSE)  

# Use dimdesc() to Describe PCA Dimensions for TBI
dimdesc_tbi <- dimdesc(pca_tbi_SA_2, axes = c(1, 2))  # Analyze PC1 and PC2 for TBI
print(dimdesc_tbi)  # View variable contributions and p-values for TBI

# Use dimdesc() to Describe PCA Dimensions for Control
dimdesc_control <- dimdesc(pca_control_SA_2, axes = c(1, 2))  # Analyze PC1 and PC2 for Control
print(dimdesc_control)  # View variable contributions and p-values for Control

pca_tbi_SA_2$var$coord  # Factor loadings in FactoMineR PCA
pca_control_SA_2$var$coord  # Factor loadings in FactoMineR PCA


# Filtered factor loadings for TBI group (SA)
factor_loadings_control_SA_2_filtered <- as.data.frame(pca_control_SA_2$var$coord)
factor_loadings_control_SA_2_filtered[abs(factor_loadings_control_SA_2_filtered) < 0.63] <- NA

# Add row names (variable names) to a new column
factor_loadings_control_SA_2_filtered$Variable <- rownames(factor_loadings_control_SA_2_filtered)

# Convert to long format for ggplot2
factor_loadings_long_control_SA_2 <- reshape2::melt(factor_loadings_control_SA_2_filtered, 
                                                    id.vars = "Variable",
                                                    variable.name = "Principal Component",
                                                    value.name = "Loading")

# Remove NA values (filtered out by cutoff)
factor_loadings_long_control_SA_2 <- factor_loadings_long_control_SA_2[!is.na(factor_loadings_long_control_SA_2$Loading), ]


# Map the full names to the 'Variable' column
factor_loadings_long_control_SA_2$Variable <- full_names_SA[factor_loadings_long_control_SA_2$Variable]

# Handle missing mappings (replace NA or remove them)
factor_loadings_long_control_SA_2 <- factor_loadings_long_control_SA_2[!is.na(factor_loadings_long_control_SA_2$Variable), ]

# Filter for PC1 (Dim.1) only
factor_loadings_control_PC1_2 <- factor_loadings_long_control_SA_2[factor_loadings_long_control_SA_2$`Principal Component` == "Dim.1", ]


# Plot the bar graph for PC1
library(ggplot2)

ggplot(factor_loadings_control_PC1_2, aes(x = reorder(Variable, -abs(Loading)), y = Loading)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Bar Graph of SA Factor Loadings for PC1 (Control Group)",
    x = "Variables (Regions)",
    y = "Factor Loading"
  )


# Filtered factor loadings for TBI group (SA)
factor_loadings_tbi_SA_filtered <- as.data.frame(pca_tbi_SA_2$var$coord)
factor_loadings_tbi_SA_filtered[abs(factor_loadings_tbi_SA_filtered) < 0.63] <- NA

# Add row names (variable names) to a new column
factor_loadings_tbi_SA_filtered$Variable <- rownames(factor_loadings_tbi_SA_filtered)

# Convert to long format for ggplot2
factor_loadings_long_tbi_SA <- reshape2::melt(factor_loadings_tbi_SA_filtered, 
                                              id.vars = "Variable",
                                              variable.name = "Principal Component",
                                              value.name = "Loading")

# Remove NA values (filtered out by cutoff)
factor_loadings_long_tbi_SA <- factor_loadings_long_tbi_SA[!is.na(factor_loadings_long_tbi_SA$Loading), ]


# Map the full names to the 'Variable' column
factor_loadings_long_tbi_SA$Variable <- full_names_SA[factor_loadings_long_tbi_SA$Variable]

# Handle missing mappings (replace NA or remove them)
factor_loadings_long_tbi_SA <- factor_loadings_long_tbi_SA[!is.na(factor_loadings_long_tbi_SA$Variable), ]

# Filter for PC1 (Dim.1) only
factor_loadings_tbi_PC1 <- factor_loadings_long_tbi_SA[factor_loadings_long_tbi_SA$`Principal Component` == "Dim.1", ]

# Plot the bar graph for TBI group (PC1 only)
library(ggplot2)

ggplot(factor_loadings_tbi_PC1, aes(x = reorder(Variable, -abs(Loading)), y = Loading)) +
  geom_bar(stat = "identity", fill = "darkorange") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Bar Graph of SA Factor Loadings for PC1 (TBI Group)",
    x = "Variables (Regions)",
    y = "Factor Loading"
  )

# Combine the datasets and add group labels
factor_loadings_control_PC1_2$Group <- "Control"
factor_loadings_tbi_PC1$Group <- "TBI"

View (factor_loadings_tbi_PC1)


# Combine Control and TBI datasets
combined_data <- rbind(factor_loadings_control_PC1_2, factor_loadings_tbi_PC1)

View(combined_data)

# Convert Group into a factor to use it as a facet
combined_data$Group <- as.factor(combined_data$Group)

# Create the plot
library(ggplot2)
ggplot(combined_data, aes(x = reorder(Variable, -abs(Loading)), y = abs(Loading), fill = Loading)) +
  facet_wrap(~ Group, nrow = 1) + # Separate facets for Control and TBI
  geom_bar(stat = "identity") + # Bar plot
  coord_flip() + # Flip coordinates for better readability
  scale_fill_gradient2(
    name = "Loading",
    high = "blue", mid = "white", low = "red", # Positive = blue, Negative = red
    midpoint = 0, guide = "colourbar"
  ) +
  labs(
    title = "PC1 Factor Loadings for Surface Area",
    x = "Regions of Interest",
    y = "Loading Strength"
  ) +
  theme_bw(base_size = 12) + # Clean black-and-white theme
  theme(
    strip.text = element_text(size = 12, face = "bold"), # Bold facet labels
    axis.text.y = element_text(size = 12), # Adjust y-axis text size
    legend.position = "right", # Position legend
    plot.title = element_text(hjust = 0.5) # <-- Center the title
  )

ggplot(combined_data, aes(x = reorder(Variable, -abs(Loading)), y = abs(Loading), fill = Loading)) +
  facet_wrap(~ Group, nrow = 1) +
  geom_bar(stat = "identity", width = 0.7) +  # Add space between bars
  coord_flip() +
  scale_fill_gradient2(
    name = "Loading",
    high = "blue", mid = "white", low = "red",
    midpoint = 0, guide = "colourbar"
  ) +
  labs(
    title = "PC1 Factor Loadings for Surface Area",
    x = "Regions of Interest",
    y = "Loading Strength"
  ) +
  theme_bw(base_size = 12) +
  theme(
    strip.text = element_text(size = 12, face = "bold"),
    axis.text.y = element_text(size = 12),
    legend.position = "right",
    plot.title = element_text(hjust = 0.5),  # Center the title
    axis.title.y = element_text(margin = margin(r = 10))  # Add right-side margin to y-axis label
  )


# Extract cos² values for TBI and Control groups
cos2_SA_tbi <- pca_control_SA_2$var$cos2
cos2_SA_control <- pca_control_SA_2$var$cos2

# View the cos² values
head(cos2_SA_tbi)
head(cos2_SA_control)
View(cos2_SA_tbi)
View(cos2_SA_control)

install.packages("reshape2")
library(reshape2)
install.packages("data.table")
library(data.table)
library (ggplot2)



# Extract cos² values for PC1 (Dim.1)
cos2_SA_tbi <- pca_tbi_SA_2$var$cos2[, "Dim.1"]
cos2_SA_control <- pca_control_SA_2$var$cos2[, "Dim.1"]

#  Map descriptive names (defined earlier) to variables
names(cos2_SA_tbi) <- full_names_SA[names(cos2_SA_tbi)]
names(cos2_SA_control) <- full_names_SA[names(cos2_SA_control)]

# Remove NA values to avoid issues
cos2_SA_tbi <- cos2_SA_tbi[!is.na(names(cos2_SA_tbi))]
cos2_SA_control <- cos2_SA_control[!is.na(names(cos2_SA_control))]

# Combine Cos² values into a single data frame
cos2_comparison <- data.frame(
  Variable = names(cos2_SA_tbi),
  Cos2_TBI = cos2_SA_tbi,
  Cos2_Control = cos2_SA_control[names(cos2_SA_tbi)] # Match variables
)

#  Reshape data for ggplot2 visualization
cos2_long <- melt(cos2_comparison, id.vars = "Variable", 
                  variable.name = "Group", value.name = "Cos2")

#  Plot the Cos² comparison (Bar Plot)
ggplot(cos2_long, aes(x = reorder(Variable, -Cos2), y = Cos2, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Comparison of SA Cos² PC1 Values between TBI and Control",
    x = "Variables (Regions)",
    y = "Cos² Value",
    fill = "Group"
  ) +
  scale_fill_manual(values = c("Cos2_TBI" = "darkorange", "Cos2_Control" = "steelblue"))


# Load necessary libraries
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(car)
library(reshape2)


# Extract **Factor Loadings** from PCA for PC1 (instead of cos2 values)
factor_loadings_SA_tbi <- pca_tbi_SA_2$var$coord[, "Dim.1"]
factor_loadings_SA_control <- pca_control_SA_2$var$coord[, "Dim.1"]

# Map descriptive names (ensure full_names_SA is correctly defined)
names(factor_loadings_SA_tbi) <- full_names_SA[names(factor_loadings_SA_tbi)]
names(factor_loadings_SA_control) <- full_names_SA[names(factor_loadings_SA_control)]

# Remove NA values
factor_loadings_SA_tbi <- factor_loadings_SA_tbi[!is.na(names(factor_loadings_SA_tbi))]
factor_loadings_SA_control <- factor_loadings_SA_control[!is.na(names(factor_loadings_SA_control))]

# Combine factor loadings into a dataframe
factor_loadings_comparison <- data.frame(
  Variable = names(factor_loadings_SA_tbi),
  TBI = factor_loadings_SA_tbi,
  Control = factor_loadings_SA_control[names(factor_loadings_SA_tbi)] # Match variables
)

#  Levene's Test for Variance Homogeneity
levene_data <- stack(data.frame(TBI = factor_loadings_comparison$TBI, Control = factor_loadings_comparison$Control))
colnames(levene_data) <- c("Values", "Group")
levene_result <- leveneTest(Values ~ Group, data = levene_data)
print(levene_result)

# Box plot for Levene's test results
ggplot(levene_data, aes(x = Group, y = Values, fill = Group)) +
  geom_boxplot(alpha = 0.7) +
  theme_minimal() +
  labs(
    title = "Levene's Test: SA PC1 Factor Loadings Comparison",
    x = "Group",
    y = "Factor Loadings"
  ) +
  theme(legend.position = "none")

# Scatter Plot with Regression Lines and Outliers
factor_loadings_comparison$Distance <- abs(factor_loadings_comparison$TBI - factor_loadings_comparison$Control) / sqrt(2)
factor_loadings_comparison$z_score <- scale(factor_loadings_comparison$Distance)

# Identify outliers as points with |z| > 2
outliers_factor <- factor_loadings_comparison[abs(factor_loadings_comparison$z_score) > 2, ]
print(outliers_factor)
View(outliers_factor)

# Scatter plot visualization
ggplot(factor_loadings_comparison, aes(x = Control, y = TBI)) +
  geom_point(aes(color = TBI > Control), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
  geom_smooth(
    data = subset(factor_loadings_comparison, TBI > Control),
    aes(x = Control, y = TBI), method = "lm", color = "blue", se = FALSE
  ) +
  geom_smooth(
    data = subset(factor_loadings_comparison, TBI <= Control),
    aes(x = Control, y = TBI), method = "lm", color = "red", se = FALSE
  ) +
  geom_text(
    data = outliers_factor,
    aes(x = Control, y = TBI, label = Variable),
    nudge_x = 0.02, nudge_y = 0.02,
    size = 3, color = "darkgreen"
  ) +
  labs(
    title = "Surface Area Scatter Plot of PC1 Factor Loadings",
    x = "Factor Loadings Control (PC1)",
    y = "Factor Loadings TBI (PC1)"
  ) +
  scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red"), labels = c("TBI > Control", "Control > TBI")) +
  theme_minimal()

# Step 1: Create a new variable for comparison
factor_loadings_comparison$GroupComparison <- factor(
  ifelse(factor_loadings_comparison$TBI > factor_loadings_comparison$Control,
         "TBI > Control", "Control > TBI"),
  levels = c("TBI > Control", "Control > TBI")  # Correct order for legend
)

# Step 2: Update plot using the new factor
ggplot(factor_loadings_comparison, aes(x = Control, y = TBI)) +
  geom_point(aes(color = GroupComparison), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
  geom_smooth(
    data = subset(factor_loadings_comparison, GroupComparison == "TBI > Control"),
    aes(x = Control, y = TBI), method = "lm", color = "blue", se = FALSE
  ) +
  geom_smooth(
    data = subset(factor_loadings_comparison, GroupComparison == "Control > TBI"),
    aes(x = Control, y = TBI), method = "lm", color = "red", se = FALSE
  ) +
  geom_text(
    data = outliers_factor,
    aes(x = Control, y = TBI, label = Variable),
    nudge_x = 0.02, nudge_y = 0.02,
    size = 3, color = "darkgreen"
  ) +
  labs(
    title = "Surface Area Scatter Plot of PC1 Factor Loadings",
    x = "Factor Loadings Control (PC1)",
    y = "Factor Loadings TBI (PC1)"
  ) +
  scale_color_manual(
    values = c("TBI > Control" = "blue", "Control > TBI" = "red")
  ) +
  theme_minimal() +
  theme(
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
  )

# Define the named vector
full_names_SA <- c(
  "ST102SA" = "Right Paracentral",
  "ST105SA" = "Right Pars Orbitalis",
  "ST108SA" = "Right Postcentral",
  "ST109SA" = "Right Posterior Cingulate",
  "ST110SA" = "Right Precentral",
  "ST111SA" = "Right Precuneus",
  "ST114SA" = "Right Rostral Middle Frontal",
  "ST115SA" = "Right Superior Frontal",
  "ST118SA" = "Right Supramarginal",
  "ST121SA" = "Right Transverse Temporal",
  "ST130SA" = "Right Insula",
  "ST26SA"  = "Left Fusiform",
  "ST28SA"  = "Left Hemisphere WM",
  "ST31SA"  = "Left Inferior Parietal",
  "ST32SA"  = "Left Inferior Temporal",
  "ST34SA"  = "Left Isthmus Cingulate",
  "ST36SA"  = "Left Lateral Orbitofrontal",
  "ST39SA"  = "Left Medial Orbitofrontal",
  "ST40SA"  = "Left Middle Temporal",
  "ST49SA"  = "Left Postcentral",
  "ST50SA"  = "Left Posterior Cingulate",
  "ST51SA"  = "Left Precentral",
  "ST52SA"  = "Left Precuneus",
  "ST54SA"  = "Left Rostral Anterior Cingulate",
  "ST55SA"  = "Left Rostral Middle Frontal",
  "ST56SA"  = "Left Superior Frontal",
  "ST58SA"  = "Left Superior Temporal",
  "ST87SA"  = "Right Hemisphere WM"
)

# Convert to a data frame
region_df <- data.frame(
  Region_Code = names(full_names_SA),
  Region_Name = full_names_SA,
  row.names = NULL
)

# Print the table
print(region_df)





ggplot(factor_loadings_comparison, aes(x = Control, y = TBI)) +
  geom_point(aes(color = TBI > Control), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
  geom_smooth(
    data = subset(factor_loadings_comparison, TBI > Control),
    aes(x = Control, y = TBI), method = "lm", color = "blue", se = FALSE
  ) +
  geom_smooth(
    data = subset(factor_loadings_comparison, TBI < Control),
    aes(x = Control, y = TBI), method = "lm", color = "red", se = FALSE
  ) +
  geom_text(
    data = outliers_factor,
    aes(x = Control, y = TBI, label = Variable),
    nudge_x = 0.02, nudge_y = 0.02,
    size = 5, color = "darkgreen"
  ) +
  labs(
    title = "Surface Area Scatter Plot of PC1 Factor Loadings",
    x = "Factor Loadings Control (PC1)",
    y = "Factor Loadings TBI (PC1)"
  ) +
  scale_color_manual(
    values = c("TRUE" = "blue", "FALSE" = "red"),
    labels = c("TBI > Control", "Control > TBI")
  ) +
  theme_minimal(base_size = 14) +  # Global font size
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and enlarge title
    axis.title = element_text(size = 14),  # Axis labels
    axis.text = element_text(size = 12),   # Axis tick text
    legend.title = element_blank(),        # Optional: remove legend title
    legend.text = element_text(size = 12)  # Legend text
  )


# Fit regression models and extract R² values
red_points <- factor_loadings_comparison[factor_loadings_comparison$TBI > factor_loadings_comparison$Control, ]
blue_points <- factor_loadings_comparison[factor_loadings_comparison$TBI <= factor_loadings_comparison$Control, ]

red_model_SA2 <- lm(TBI ~ Control, data = red_points)
blue_model_SA2 <- lm(TBI ~ Control, data = blue_points)

cat("R-squared for Red Points (TBI > Control):", summary(red_model_SA2)$r.squared, "\n")
cat("R-squared for Blue Points (Control > TBI):", summary(blue_model_SA2)$r.squared, "\n")

# Regression summary for both groups
cat("Regression Summary for Red Points (TBI > Control):\n")
summary(red_model_SA2)

cat("\nRegression Summary for Blue Points (Control > TBI):\n")
summary(blue_model_SA2)

###############################################################


# Full names mapping for TA
full_names_TA <- c(
  "ST102TA" = "Right Paracentral",
  "ST104TA" = "Right Pars Opercularis",
  "ST106TA" = "Right Pars Triangularis",
  "ST108TA" = "Right Postcentral",
  "ST111TA" = "Right Precuneus",
  "ST115TA" = "Right Superior Frontal",
  "ST116TA" = "Right Superior Parietal",
  "ST117TA" = "Right Superior Temporal",
  "ST118TA" = "Right Supramarginal",
  "ST119TA" = "Right Temporal Pole",
  "ST121TA" = "Right Transverse Temporal",
  "ST15TA" = "Left Caudal Middle Frontal",
  "ST26TA" = "Left Fusiform",
  "ST31TA" = "Left Inferior Parietal",
  "ST32TA" = "Left Inferior Temporal",
  "ST35TA" = "Left Lateral Occipital",
  "ST36TA" = "Left Lateral Orbitofrontal",
  "ST38TA" = "Left Lingual",
  "ST40TA" = "Left Middle Temporal",
  "ST43TA" = "Left Paracentral",
  "ST45TA" = "Left Pars Opercularis",
  "ST46TA" = "Left Pars Orbitalis",
  "ST49TA" = "Left Postcentral",
  "ST51TA" = "Left Precentral",
  "ST52TA" = "Left Precuneus",
  "ST55TA" = "Left Rostral Middle Frontal",
  "ST56TA" = "Left Superior Frontal",
  "ST57TA" = "Left Superior Parietal",
  "ST58TA" = "Left Superior Temporal",
  "ST59TA" = "Left Supramarginal",
  "ST72TA" = "Right Bankssts",
  "ST74TA" = "Right Caudal Middle Frontal",
  "ST82TA" = "Right Cuneus",
  "ST85TA" = "Right Fusiform",
  "ST90TA" = "Right Inferior Parietal",
  "ST91TA" = "Right Inferior Temporal",
  "ST94TA" = "Right Lateral Occipital",
  "ST95TA" = "Right Lateral Orbitofrontal",
  "ST99TA" = "Right Middle Temporal"
)


# Load necessary libraries
library(FactoMineR)
library(factoextra)

# Step 1: Perform PCA for TBI
pca_tbi_TA <- PCA(tbi_data_scaled_TA, graph = FALSE)  # Replace 'tbi_data' with your dataset for TBI

# Step 2: Perform PCA for Control
pca_control_TA <- PCA(control_data_scaled_TA, graph = FALSE)  # Replace 'control_data' with your dataset for Control

# Step 3: Visualize PCA Biplots for TBI
fviz_pca_var(
  pca_tbi_TA,
  label = "none",
  col.var = "cos2",                     # Color by cos²
  gradient.cols = c("blue", "orange", "red"), # Gradient for cos² values
  repel = TRUE,                         # Avoid overlapping labels
  title = "CT - TBI PCA Biplot with Cos² Gradient"
)

library (ggplot2)
install.packages("ggrepel")
library(ggrepel)

# Ensure no scientific notation
options(scipen = 999)

# Load necessary libraries
library(ggplot2)
library(ggrepel)

# Extract variable coordinates and Cos²
pca_coords_CT2 <- as.data.frame(pca_tbi_TA$var$coord)  # Variable coordinates
pca_cos2_CT2 <- as.data.frame(pca_tbi_TA$var$cos2)     # Cos² values

View (pca_cos2_CT2)

# Combine into a single dataframe
pca_df_CT2 <- cbind(pca_coords_CT2, Cos2 = pca_cos2_CT2$Dim.1)

# Add variable names as a column
pca_df_CT2$Variable <- rownames(pca_df_CT2)

# Filter for Cos² > 0.5
filtered_pca_df_CT2 <- pca_df_CT2[pca_df_CT2$Cos2 > 0.5, ]

# Rename columns for ggplot compatibility
colnames(filtered_pca_df_CT2)[1:2] <- c("x", "y")

# Map descriptive names
filtered_pca_df_CT2$DescriptiveName <- full_names_TA[filtered_pca_df_CT2$Variable]

# Ensure no NAs in descriptive labels
filtered_pca_df_CT2 <- filtered_pca_df_CT2[!is.na(filtered_pca_df_CT2$DescriptiveName), ]

# Plot without vector lines
ggplot(filtered_pca_df_CT2, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +  # Add descriptive labels
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered CT PCA Biplot for TBI (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )

# Plot with vector lines
ggplot(filtered_pca_df_CT2, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +
  geom_segment(
    aes(x = 0, y = 0, xend = x, yend = y),
    arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
    color = "darkgray", size = 0.7
  ) +
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered CT PCA Biplot for TBI with Vectors (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )


#####################################



# Step 4: Visualize PCA Biplots for Control
fviz_pca_var(
  pca_control_TA,
  label = "none",
  col.var = "cos2",                     # Color by cos²
  gradient.cols = c("blue", "orange", "red"), # Gradient for cos² values
  repel = TRUE,                         # Avoid overlapping labels
  title = "CT - Control PCA Biplot with Cos² Gradient"
)


# Load necessary libraries
library(ggplot2)
library(ggrepel)

# Extract variable coordinates and Cos²
pca_coords_CT2_control <- as.data.frame(pca_control_TA$var$coord)  # Variable coordinates
pca_cos2_CT2_control <- as.data.frame(pca_control_TA$var$cos2)     # Cos² values

View (pca_cos2_CT2_control)

# Combine into a single dataframe
pca_df_CT2_control <- cbind(pca_coords_CT2_control, Cos2 = pca_cos2_CT2_control$Dim.1)

# Add variable names as a column
pca_df_CT2_control$Variable <- rownames(pca_df_CT2_control)

# Filter for Cos² > 0.5
filtered_pca_df_CT2_control <- pca_df_CT2_control[pca_df_CT2_control$Cos2 > 0.5, ]

# Rename columns for ggplot compatibility
colnames(filtered_pca_df_CT2_control)[1:2] <- c("x", "y")

# Map descriptive names
filtered_pca_df_CT2_control$DescriptiveName <- full_names_TA[filtered_pca_df_CT2_control$Variable]

# Ensure no NAs in descriptive labels
filtered_pca_df_CT2_control <- filtered_pca_df_CT2_control[!is.na(filtered_pca_df_CT2_control$DescriptiveName), ]

# Plot without vector lines
ggplot(filtered_pca_df_CT2_control, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +  # Add descriptive labels
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered CT PCA Biplot for Control (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )

# Plot with vector lines
ggplot(filtered_pca_df_CT2_control, aes(x = x, y = y, label = DescriptiveName, color = Cos2)) +
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 50) +
  geom_segment(
    aes(x = 0, y = 0, xend = x, yend = y),
    arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
    color = "darkgray", size = 0.7
  ) +
  scale_color_gradient(low = "blue", high = "red", name = "Cos²") +
  labs(
    title = "Filtered CT PCA Biplot for Control with Vectors (Cos² > 0.5)",
    x = "Principal Component 1 (Dim.1)",
    y = "Principal Component 2 (Dim.2)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  )


# Step 5: Extract PCA Scores for TBI and Control (Optional)
pca_scores_tbi_TA <- as.data.frame(pca_tbi_TA$ind$coord)  # Observation coordinates for TBI
pca_scores_control_TA <- as.data.frame(pca_control_TA$ind$coord)  # Observation coordinates for Control

# Step 6: Use dimdesc() to Describe PCA Dimensions for TBI
dimdesc_tbi_TA <- dimdesc(pca_tbi_TA, axes = c(1, 2))  # Analyze PC1 and PC2 for TBI
print(dimdesc_tbi_TA)  # View variable contributions and p-values for TBI

# Step 7: Use dimdesc() to Describe PCA Dimensions for Control
dimdesc_control_TA <- dimdesc(pca_control_TA, axes = c(1, 2))  # Analyze PC1 and PC2 for Control
print(dimdesc_control_TA)  # View variable contributions and p-values for Control

pca_tbi_TA$var$coord  # Factor loadings in FactoMineR PCA

pca_control_TA$var$coord  # Factor loadings in FactoMineR PCA

# Extract factor loadings for TBI group
factor_loadings_tbi_TA <- as.data.frame(pca_tbi_TA$var$coord)

# Apply cutoff: Retain values > 0.63; set others to NA
factor_loadings_tbi_TA_filtered <- factor_loadings_tbi_TA
factor_loadings_tbi_TA_filtered[abs(factor_loadings_tbi_TA_filtered) < 0.63] <- NA

# Print filtered factor loadings for TBI
print(factor_loadings_tbi_TA_filtered)
View(factor_loadings_tbi_TA_filtered)

# Extract factor loadings for Control group
factor_loadings_control_TA <- as.data.frame(pca_control_TA$var$coord)

# Apply cutoff: Retain values > 0.63; set others to NA
factor_loadings_control_TA_filtered <- factor_loadings_control_TA
factor_loadings_control_TA_filtered[abs(factor_loadings_control_TA_filtered) < 0.63] <- NA

View (factor_loadings_control_TA_filtered)

# Print filtered factor loadings for Control
print(factor_loadings_control_TA_filtered)
View(factor_loadings_control_TA_filtered)

# Add variable names to filtered factor loadings
factor_loadings_tbi_TA_filtered$Variable <- rownames(factor_loadings_tbi_TA_filtered)
factor_loadings_control_TA_filtered$Variable <- rownames(factor_loadings_control_TA_filtered)

# Convert to long format for TBI
factor_loadings_long_tbi_TA <- reshape2::melt(factor_loadings_tbi_TA_filtered,
                                              id.vars = "Variable",
                                              variable.name = "Principal Component",
                                              value.name = "Loading")

# Convert to long format for Control
factor_loadings_long_control_TA <- reshape2::melt(factor_loadings_control_TA_filtered,
                                                  id.vars = "Variable",
                                                  variable.name = "Principal Component",
                                                  value.name = "Loading")

# Remove NA values for both groups
factor_loadings_long_tbi_TA <- factor_loadings_long_tbi_TA[!is.na(factor_loadings_long_tbi_TA$Loading), ]
factor_loadings_long_control_TA <- factor_loadings_long_control_TA[!is.na(factor_loadings_long_control_TA$Loading), ]


# Map full names to Variables
factor_loadings_long_tbi_TA$Variable <- full_names_TA[factor_loadings_long_tbi_TA$Variable]
factor_loadings_long_control_TA$Variable <- full_names_TA[factor_loadings_long_control_TA$Variable]

# Filter for PC1 (Dim.1) for TBI and Control
factor_loadings_tbi_TA_PC1 <- factor_loadings_long_tbi_TA[factor_loadings_long_tbi_TA$`Principal Component` == "Dim.1", ]
factor_loadings_control_TA_PC1 <- factor_loadings_long_control_TA[factor_loadings_long_control_TA$`Principal Component` == "Dim.1", ]

# Add group labels
factor_loadings_tbi_TA_PC1$Group <- "TBI"
factor_loadings_control_TA_PC1$Group <- "Control"

# Combine datasets
combined_TA_data <- rbind(factor_loadings_tbi_TA_PC1, factor_loadings_control_TA_PC1)

View (combined_TA_data)

# Plot combined bar graph
library(ggplot2)
ggplot(combined_TA_data, aes(x = reorder(Variable, -abs(Loading)), y = abs(Loading), fill = Loading)) +
  facet_wrap(~ Group, nrow = 1.) +
  geom_bar(stat = "identity") +
  coord_flip() +
  scale_fill_gradient2(
    name = "Loading",
    high = "blue", mid = "white", low = "red",
    midpoint = 0, guide = "colourbar"
  ) +
  labs(
    title = "PC1 Factor Loadings for Cortical Thickness",
    x = "Regions of Interest",
    y = "Loading Strength"
  ) +
  theme_bw(base_size = 11) +
  theme(
    strip.text = element_text(size = 10, face = "bold"),
    axis.text.y = element_text(size = 10.5),
    legend.position = "right", # Position legend
    plot.title = element_text(hjust = 0.5) # <-- Center the title
  )
ggplot(combined_TA_data, aes(x = reorder(Variable, -abs(Loading)), y = abs(Loading), fill = Loading)) +
  facet_wrap(~ Group, nrow = 1) +
  geom_bar(stat = "identity", width = 0.7) +  # Reduce bar width to create space between bars
  coord_flip() +
  scale_fill_gradient2(
    name = "Loading",
    high = "blue", mid = "white", low = "red",
    midpoint = 0, guide = "colourbar"
  ) +
  labs(
    title = "PC1 Factor Loadings for Cortical Thickness",
    x = "Regions of Interest",
    y = "Loading Strength"
  ) +
  theme_bw(base_size = 12) +
  theme(
    strip.text = element_text(size = 11, face = "bold"),
    axis.text.y = element_text(size = 10.5),
    legend.position = "right",
    plot.title = element_text(hjust = 0.5),
    axis.title.y = element_text(margin = margin(r = 10))  # Add right margin to y-axis title
  )


# Extract cos² values for TBI and Control groups
cos2_tbi <- pca_tbi_TA$var$cos2
cos2_control <- pca_control_TA$var$cos2

# View the cos² values
head(cos2_tbi)
head(cos2_control)
View(cos2_tbi)
View(cos2_control)

# Load required libraries
library(FactoMineR)
library(factoextra)
library(reshape2)
library(ggplot2)
library(car)
library(corrplot)

# Step 3: Extract Cos² Values for PC1 (Dim.1)
cos2_TBI_TA2 <- pca_tbi_TA$var$cos2[, "Dim.1"]
cos2_Control_TA2 <- pca_control_TA$var$cos2[, "Dim.1"]

names(cos2_TBI_TA2) <- full_names_TA[names(cos2_TBI_TA2)]
names(cos2_Control_TA2) <- full_names_TA[names(cos2_Control_TA2)]

# Remove NA values
cos2_TBI_TA2 <- cos2_TBI_TA2[!is.na(names(cos2_TBI_TA2))]
cos2_Control_TA2 <- cos2_Control_TA2[!is.na(names(cos2_Control_TA2))]

# Step 5: Combine Cos² Values into a Data Frame
cos2_comparison_TA2 <- data.frame(
  Variable = names(cos2_TBI_TA2),
  TBI = cos2_TBI_TA2,
  Control = cos2_Control_TA2[names(cos2_TBI_TA2)]  # Match variables
)

install.packages("car")
library (car)
library (ggplot2)
library (reshape2)

# Step 6: Levene's Test
levene_data_TA2 <- stack(data.frame(TBI = cos2_comparison_TA2$TBI, Control = cos2_comparison_TA2$Control))
colnames(levene_data_TA2) <- c("Values", "Group")
levene_result_TA2 <- leveneTest(Values ~ Group, data = levene_data_TA2)
print(levene_result_TA2)

# Box plot for Levene's test
ggplot(levene_data_TA2, aes(x = Group, y = Values, fill = Group)) +
  geom_boxplot(alpha = 0.7) +
  theme_minimal() +
  labs(
    title = "Levene's Test: CT PC1 Variance Comparison",
    x = "Group",
    y = "Values"
  ) +
  theme(legend.position = "none")

# Step 7: Bar Plot for Cos² Comparison
cos2_long_TA2 <- melt(cos2_comparison_TA2, id.vars = "Variable", variable.name = "Group", value.name = "Cos2")
ggplot(cos2_long_TA2, aes(x = reorder(Variable, -Cos2), y = Cos2, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  labs(
    title = "Comparison of CT Cos² PC1 Values: TBI vs Control",
    x = "Variables (Regions)",
    y = "Cos² Value",
    fill = "Group"
  ) +
  scale_fill_manual(values = c("TBI" = "darkorange", "Control" = "steelblue")) +
  theme_minimal()

# Step 8: Scatter Plot with Regression Lines and Outliers
cos2_comparison_TA2$Distance <- abs(cos2_comparison_TA2$TBI - cos2_comparison_TA2$Control) / sqrt(2)
cos2_comparison_TA2$z_score <- scale(cos2_comparison_TA2$Distance)


# Identify outliers as points with |z| > 2
outliers_TA2 <- cos2_comparison_TA2[abs(cos2_comparison_TA2$z_score) > 2, ]

# Ensure the `Variable` column is correctly mapped for cos2_comparison_TA2
cos2_comparison_TA2$Variable <- full_names_TA[cos2_comparison_TA2$Variable]

# Ensure outliers inherit the correct mapping
outliers_TA2 <- cos2_comparison_TA2[abs(cos2_comparison_TA2$z_score) > 2, ]
print (outliers_TA2)

# Scatter plot with corrected forced labels
ggplot(cos2_comparison_TA2, aes(x = Control, y = TBI)) +
  geom_point(aes(color = TBI > Control), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
  geom_smooth(
    data = subset(cos2_comparison_TA2, TBI > Control),
    aes(x = Control, y = TBI), method = "lm", color = "red", se = FALSE
  ) +
  geom_smooth(
    data = subset(cos2_comparison_TA2, TBI <= Control),
    aes(x = Control, y = TBI), method = "lm", color = "blue", se = FALSE
  ) +
  geom_text(
    data = outliers_TA2,
    aes(x = Control, y = TBI, label = Variable),
    nudge_x = 0.02, nudge_y = 0.02,
    size = 3, color = "darkgreen"
  ) +
  labs(
    title = "Scatter Plot of CT Cos² PC1 (TBI vs Control)",
    x = "Cos² Control (PC1)",
    y = "Cos² TBI (PC1)"
  ) +
  scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue"), labels = c("TBI > Control", "Control > TBI")) +
  theme_minimal()

# Step 9: Regression Models for TBI > Control and Control > TBI
red_points_TA2 <- cos2_comparison_TA2[cos2_comparison_TA2$TBI > cos2_comparison_TA2$Control, ]
blue_points_TA2 <- cos2_comparison_TA2[cos2_comparison_TA2$TBI <= cos2_comparison_TA2$Control, ]

red_model_TA2 <- lm(TBI ~ Control, data = red_points_TA2)
blue_model_TA2 <- lm(TBI ~ Control, data = blue_points_TA2)






# Full Regression Summaries
cat("Regression Summary for Red Points (TBI > Control):\n")
summary(red_model_TA2)

cat("\nRegression Summary for Blue Points (Control > TBI):\n")
summary(blue_model_TA2)



#MANCOVA with the defined ROIS from PCA SURFACE AREA VARIABLES

# Load necessary libraries
library(readxl)
library(car)
library(ggplot2)


dependent_vars_SA <- c(
  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
  "ST118SA", "ST121SA", "ST130SA", "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA", "ST36SA",
  "ST39SA", "ST40SA", "ST49SA","ST51SA", "ST52SA", "ST55SA", "ST56SA", 
  "ST58SA", "ST87SA"
)

#Determine Significant Level through MEFF

sa_data <- MichelleProjectclean[, dependent_vars_SA]  # Subset the dataset for SA variables
correlation_matrix_sa2 <- cor(sa_data, use = "complete.obs")
eigenvalues_sa2 <- eigen(correlation_matrix_sa2)$values
meff_sa2 <- sum(pmin(eigenvalues_sa2, 1))
print(meff_sa2)
adjusted_p_threshold_sa2 <- 0.05 / meff_sa2
print(adjusted_p_threshold_sa2)


# Define the independent variable and covariates
independent_var_SA <- MichelleProjectclean$COHORT
covariates_SA <- MichelleProjectclean[, c("Age.at.Exam","Education", 
                                          "ST10CV", "GDS", "CAPS")]

# Check the structure of dependent variables
str(MichelleProjectclean[, dependent_vars_SA])

# Check the length of the independent variable
length(independent_var_SA)

# Check the length of covariates
sapply(c("Age.at.Exam", "Education","ST10CV","GDS", "CAPS"), function(x) length(MichelleProjectclean[[x]]))

# Create a matrix for dependent variables (Surface Area)
dependent_vars_matrix_SA <- as.matrix(MichelleProjectclean[, dependent_vars_SA])

# Check the length of independent_var_SA
length(independent_var_SA) == nrow(dependent_vars_matrix_SA)  # Should return TRUE

# Run MANOVA
mancova_model_SA <- manova(
  dependent_vars_matrix_SA ~ COHORT +
    Age.at.Exam + Education +
    + ST10CV +GDS + CAPS,
  data = MichelleProjectclean
)

# Summary of the MANOVA model
summary(mancova_model_SA)


#Post-Hoc Analysis to Assess Each Dependent Variable Separately
posthoc_results_SA <- summary.aov(mancova_model_SA)
print("Post-Hoc Results for Each Dependent Variable:")
print(posthoc_results_SA)


# Extract p-values from post hoc results (SA)
p_values_SA <- c()
response_names_SA <- c()

for (response_name in names(posthoc_results_SA)) {
  anova_table_SA <- posthoc_results_SA[[response_name]]
  
  # Check if the table has the Pr(>F) column
  if (!is.null(anova_table_SA) && "Pr(>F)" %in% colnames(anova_table_SA)) {
    p_values_SA <- c(p_values_SA, anova_table_SA$`Pr(>F)`)
    response_names_SA <- c(response_names_SA, rep(response_name, nrow(anova_table_SA)))
  }
}

# Apply FDR correction
adjusted_p_values_SA <- p.adjust(p_values_SA, method = "fdr")

# Create a data frame of the adjusted p-values
fdr_results_SA <- data.frame(
  Response = response_names_SA,
  Original_P = p_values_SA,
  Adjusted_P = adjusted_p_values_SA
)

# Print and save the FDR-corrected significant results
print(fdr_results_SA)
View (significant_fdr_SA)
write.csv(significant_fdr_SA, file = "fdr_corrected_significant_results_SA.csv", row.names = FALSE)


# Post-Hoc Analysis to Extract Significant Results
significant_results_SA <- list()  # Initialize an empty list

# Set the significance threshold
significance_threshold_SA <- 0.05

# Iterate over each dependent variable's results in the list
for (response_name in names(posthoc_results_SA)) {
  # Extract the ANOVA table for the current response variable
  anova_table_SA <- posthoc_results_SA[[response_name]]
  
  # Ensure the table contains a column for `Pr(>F)` and filter for significance
  if ("Pr(>F)" %in% colnames(anova_table_SA)) {
    significant_rows_SA <- anova_table_SA[anova_table_SA$`Pr(>F)` < significance_threshold_SA, ]
    
    # Check if significant rows exist
    if (nrow(significant_rows_SA) > 0) {
      # Add the response name to the significant rows
      significant_rows_SA$response <- response_name
      significant_results_SA[[response_name]] <- significant_rows_SA
    }
  }
}

# Combine all significant results into one data frame
final_significant_results_SA <- do.call(rbind, significant_results_SA)

# Remove duplicated rows based on all columns
final_significant_results_SA <- final_significant_results_SA[!duplicated(final_significant_results_SA), ]

# View the cleaned results
print(final_significant_results_SA)
View(final_significant_results_SA)


#MANCOVA with the defined ROIS from PCA CORTICAL THICKNESS VARIABLES

# Load necessary libraries
library(readxl)
library(car)
library(ggplot2)

# Step 1: Define the Dependent Variables Matrix with cortical volumes and surface areas
dependent_vars_TA <- c(
  "ST102TA", "ST104TA", "ST106TA", "ST108TA", "ST111TA",
  "ST115TA", "ST116TA", "ST117TA", "ST118TA", "ST119TA",
  "ST121TA", "ST15TA", "ST26TA", "ST31TA", "ST35TA",
  "ST36TA", "ST38TA", "ST40TA", "ST43TA", "ST45TA",
  "ST46TA", "ST49TA", "ST51TA", "ST52TA", "ST55TA",
  "ST56TA", "ST57TA", "ST58TA", "ST59TA", "ST72TA",
  "ST74TA", "ST82TA", "ST85TA", "ST90TA", "ST91TA",
  "ST94TA", "ST95TA", "ST99TA"
)

Ta_data <- MichelleProjectclean[, dependent_vars_TA]  # Subset the dataset for SA variables
correlation_matrix_Ta2 <- cor(Ta_data, use = "complete.obs")
eigenvalues_Ta2 <- eigen(correlation_matrix_Ta2)$values
meff_Ta2 <- sum(pmin(eigenvalues_Ta2, 1))
print(meff_Ta2)
adjusted_p_threshold_Ta2 <- 0.05 / meff_Ta2
print(adjusted_p_threshold_Ta2)


# Define the independent variable and covariates (including MoCA)
independent_var_TA <- MichelleProjectclean$COHORT
covariates_TA <- MichelleProjectclean[, c("Age.at.Exam","Education", 
                                          "ST10CV", "GDS", "CAPS")]

# Check the structure of dependent variables
str(MichelleProjectclean[, dependent_vars_TA])

# Check the length of the independent variable
length(independent_var_TA)

# Check the length of covariates
sapply(c("Age.at.Exam", "Education","ST10CV","GDS", "CAPS"), function(x) length(MichelleProjectclean[[x]]))

# Create a matrix for dependent variables (Surface Area)
dependent_vars_matrix_TA <- as.matrix(MichelleProjectclean[, dependent_vars_TA])

# Check the length of independent_var_SA
length(independent_var_TA) == nrow(dependent_vars_matrix_TA)  # Should return TRUE

# Run MANOVA
mancova_model_TA <- manova(
  dependent_vars_matrix_TA ~ COHORT +
    Age.at.Exam + Education +
    + ST10CV +GDS + CAPS,
  data = MichelleProjectclean
)

# Summary of the MANOVA model
summary(mancova_model_TA)

#Post-Hoc Analysis to Assess Each Dependent Variable Separately
posthoc_results_TA <- summary.aov(mancova_model_TA)
print("Post-Hoc Results for Each Dependent Variable:")
print(posthoc_results_TA)


#T-test for COHORT significant Groups with correct for multiple comparisons 
# List of variables for the t-test
variables_ta_norm <- c(
  "ST121SA", "ST111SA"
)

# Initialize vectors to store results
t_stats <- numeric()
p_values <- numeric()

# Loop to perform t-tests for each variable
for (variable in variables_ta_norm) {
  # Perform t-test
  t_test_result <- t.test(
    MichelleProjectclean[[variable]] ~ MichelleProjectclean$COHORT, 
    var.equal = TRUE # Change to FALSE if variances are unequal
  )
  
  # Store the t-statistic and p-value
  t_stats <- c(t_stats, t_test_result$statistic)
  p_values <- c(p_values, t_test_result$p.value)
}

# Perform FDR correction
fdr_results <- p.adjust(p_values, method = "fdr")

# Create a results data frame
results_df <- data.frame(
  Variable = variables_ta_norm,
  T_Statistic = t_stats,
  P_Value = p_values,
  FDR_Corrected_P_Value = fdr_results,
  Significant = fdr_results < 0.05
)

# Print the results
print(results_df)



# Load necessary library
library(dplyr)

# Calculate descriptive statistics for ST10CV grouped by COHORT
descriptive_stats <- MichelleProjectclean %>%
  group_by(COHORT) %>%
  summarise(
    Mean = mean(ST10CV, na.rm = TRUE),
    Median = median(ST10CV, na.rm = TRUE),
    SD = sd(ST10CV, na.rm = TRUE),
    Min = min(ST10CV, na.rm = TRUE),
    Max = max(ST10CV, na.rm = TRUE),
    IQR = IQR(ST10CV, na.rm = TRUE),  # Calculate the Interquartile Range
    N = n()
  )

# Print the results
print(descriptive_stats)


# Perform Shapiro-Wilk test for normality by COHORT
shapiro_results <- MichelleProjectclean %>%
  group_by(COHORT) %>%
  summarise(
    Shapiro_W = shapiro.test(ST10CV)$statistic,
    P_Value = shapiro.test(ST10CV)$p.value
  )

# Print the results
print(shapiro_results)

# Perform an independent t-test
ttest_results <- t.test(ST10CV ~ COHORT, data = MichelleProjectclean, var.equal = TRUE)

# Print the t-test results
print(ttest_results)


# Define significant variables
significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")

# Subset the dataset for TBI and Control groups
# Correct subsetting based on actual COHORT labels
tbi_data <- MichelleProjectclean[MichelleProjectclean$COHORT == 2, ]  # Replace 1 with the actual TBI label
control_data <- MichelleProjectclean[MichelleProjectclean$COHORT == 3, ]  # Replace 2 with the actual Control label


# Initialize lists to store correlation results
tbi_correlations <- list()
control_correlations <- list()

# Loop through each significant CT variable to compute correlations with age
for (var in significant_CT_vars) {
  # Compute correlation for TBI group
  tbi_cor <- cor.test(tbi_data[[var]], tbi_data$Age.at.Exam, method = "pearson")
  
  # Compute correlation for Control group
  control_cor <- cor.test(control_data[[var]], control_data$Age.at.Exam, method = "pearson")
  
  # Store results in the lists
  tbi_correlations[[var]] <- list(
    Correlation = tbi_cor$estimate,
    P_Value = tbi_cor$p.value
  )
  
  control_correlations[[var]] <- list(
    Correlation = control_cor$estimate,
    P_Value = control_cor$p.value
  )
}

# Combine the results into data frames for easier viewing
tbi_results <- data.frame(
  Variable = names(tbi_correlations),
  Correlation = sapply(tbi_correlations, function(x) x$Correlation),
  P_Value = sapply(tbi_correlations, function(x) x$P_Value)
)

control_results <- data.frame(
  Variable = names(control_correlations),
  Correlation = sapply(control_correlations, function(x) x$Correlation),
  P_Value = sapply(control_correlations, function(x) x$P_Value)
)

# Print results
cat("TBI Group Correlations:\n")
print(tbi_results)
View(tbi_results)

cat("\nControl Group Correlations:\n")
print(control_results)
View(control_results)

# Visualize correlations using ggplot2
library(ggplot2)

# Combine results for visualization
tbi_results$Group <- "TBI"
control_results$Group <- "Control"
combined_results <- rbind(tbi_results, control_results)

# Map descriptive names to variables
combined_results$DescriptiveName <- ifelse(
  combined_results$Variable %in% names(full_names_SA),
  full_names_SA[combined_results$Variable],
  full_names_TA[combined_results$Variable]
)

# Plot using descriptive names
ggplot(combined_results, aes(x = DescriptiveName, y = Correlation, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  labs(
    title = "Group-Specific Correlations Between Age and Variables",
    x = "Cortical Thickness/Surface Area Regions",
    y = "Correlation Coefficient",
    fill = "Group"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.y = element_text(size = 10),
    legend.position = "right"
  )

# Apply FDR correction for TBI group
tbi_results$Adjusted_P_Value <- p.adjust(tbi_results$P_Value, method = "fdr")

# Apply FDR correction for Control group
control_results$Adjusted_P_Value <- p.adjust(control_results$P_Value, method = "fdr")

# Combine results for visualization
tbi_results$Group <- "TBI"
control_results$Group <- "Control"
combined_results <- rbind(tbi_results, control_results)

print(combined_results)
View (combined_results)

# Map descriptive names to variables
combined_results$DescriptiveName <- ifelse(
  combined_results$Variable %in% names(full_names_SA),
  full_names_SA[combined_results$Variable],
  full_names_TA[combined_results$Variable]
)

# Add significance labels based on adjusted p-values
combined_results$Significant <- combined_results$Adjusted_P_Value < 0.05

# Plot using descriptive names
ggplot(combined_results, aes(x = DescriptiveName, y = Correlation, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = ifelse(Significant, "*", "")), 
            position = position_dodge(width = 0.9), vjust = -0.5) +
  coord_flip() +
  labs(
    title = "Group-Specific Correlations Between Age and Variables (FDR Corrected)",
    x = "Cortical Thickness/Surface Area Regions",
    y = "Correlation Coefficient",
    fill = "Group"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.y = element_text(size = 10),
    legend.position = "right"
  )


# Define a function for Fisher's Z-test
fisher_z_test <- function(r1, r2, n1, n2) {
  z1 <- 0.5 * log((1 + r1) / (1 - r1))
  z2 <- 0.5 * log((1 + r2) / (1 - r2))
  se <- sqrt(1 / (n1 - 3) + 1 / (n2 - 3))
  z <- (z1 - z2) / se
  p_value <- 2 * (1 - pnorm(abs(z)))  # Two-tailed p-value
  return(list(Z = z, P_Value = p_value))
}

# Add sample sizes for TBI and Control groups
n_tbi <- nrow(tbi_data)
n_control <- nrow(control_data)

# Initialize results list
fisher_results <- list()

# Loop through variables
for (var in significant_CT_vars) {
  r_tbi <- tbi_results$Correlation[tbi_results$Variable == var]
  r_control <- control_results$Correlation[control_results$Variable == var]
  fisher_results[[var]] <- fisher_z_test(r_tbi, r_control, n_tbi, n_control)
}

# Combine results into a data frame
fisher_results_df <- do.call(rbind, lapply(names(fisher_results), function(var) {
  c(Variable = var, fisher_results[[var]])
}))

# Convert to data frame
fisher_results_df <- as.data.frame(fisher_results_df)
fisher_results_df$P_Value <- as.numeric(fisher_results_df$P_Value)

# Print results
print(fisher_results_df)
View (fisher_results_df)





# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr) # For mapping functions

# Run regression analysis separately for each variable
regression_results_Age <- long_data %>%
  group_by(DescriptiveName) %>%
  nest() %>%
  mutate(
    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
  ) %>%
  select(DescriptiveName, Intercept, Slope, P_Value, R_Squared) # Select relevant columns

# Print regression summaries with effect size
print(regression_results_Age)
View (regression_results_Age)

############SPLIT BY COHORT################

# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr) # For mapping functions

# Define significant variables
significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")

# Define real descriptive names for variables
descriptive_names <- c(
  "ST38TA" = "Left Lingual CT",
  "ST40TA" = "Left Middle Temporal CT",
  "ST51TA" = "Left Precentral CT",
  "ST85TA" = "Right Fusiform CT",
  "ST99TA" = "Right Middle Temporal CT",
  "ST51SA" = "Left Precentral SA"
)

# Subset dataset for TBI and Control groups
tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
control_data <- MichelleProjectclean %>% filter(COHORT == 3)

# Combine both groups for plotting
combined_data <- bind_rows(
  tbi_data %>% mutate(Group = "TBI"),
  control_data %>% mutate(Group = "Control")
)

# Convert data to long format for ggplot
long_data <- combined_data %>%
  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))

# Generate scatterplot with jitter, regression lines, and separate panels for TBI & Control
p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = Group)) +
  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
  geom_smooth(method = "lm", se = TRUE, aes(fill = Group), alpha = 0.2) +  # Regression lines
  scale_color_manual(values = c("red", "blue")) +  # Colors for TBI & Control
  scale_fill_manual(values = c("red", "blue")) +   # Fill for regression bands
  facet_wrap(~ DescriptiveName + Group, scales = "free_y") +  # Separate plots for each variable and group
  labs(
    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area by Group",
    x = "Age at Exam",
    y = "Cortical Thickness / Surface Area Value",
    color = "Group",
    fill = "Group"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Print plot
print(p)




























### I want to determine if the PCAs are linearly separable for my discussion section 

# Extract PC1 scores for TBI and Control
PC1_tbi <- pca_tbi_SA_2$ind$coord[,1]
PC1_control <- pca_control_SA_2$ind$coord[,1]

# Create a combined dataframe
pca_pc1_df <- data.frame(
  PC1 = c(PC1_tbi, PC1_control),
  Group = c(rep("TBI", length(PC1_tbi)), rep("Control", length(PC1_control)))
)

library(ggplot2)

# PC1 distribution for both groups
ggplot(pca_pc1_df, aes(x = PC1, fill = Group)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  ggtitle("PC1 Density Distribution for TBI vs Control")

library(ggplot2)

ggplot(pca_pc1_df, aes(x = Group, y = PC1, color = Group)) +
  geom_jitter(width = 0.2, alpha = 0.7) +
  theme_minimal() +
  ggtitle("PC1 Jitter Plot: TBI vs Control")



# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)


# Define significant variables
significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")

# Define real descriptive names for variables
descriptive_names <- c(
  "ST38TA" = "Left Lingual CT",
  "ST40TA" = "Left Middle Temporal CT",
  "ST51TA" = "Left Precentral CT",
  "ST85TA" = "Right Fusiform CT",
  "ST99TA" = "Right Middle Temporal CT",
  "ST51SA" = "Left Precentral SA"
)

# Subset dataset for TBI and Control groups
tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
control_data <- MichelleProjectclean %>% filter(COHORT == 3)

# Combine both groups for plotting
combined_data <- bind_rows(
  tbi_data %>% mutate(Group = "TBI"),
  control_data %>% mutate(Group = "Control")
)

# Convert data to long format for ggplot
long_data <- combined_data %>%
  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))

# Generate scatterplot with jitter, regression lines, and regression summaries
p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = DescriptiveName)) +
  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
  geom_smooth(method = "lm", se = TRUE, aes(fill = DescriptiveName), alpha = 0.2) +  # Regression lines
  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "brown")) +  # Custom colors
  scale_fill_manual(values = c("red", "blue", "green", "purple", "orange", "brown")) +  # Fill for regression bands
  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
  labs(
    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area",
    x = "Age at Exam",
    y = "Cortical Thickness / Surface Area Value",
    color = "Brain Region"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Print plot
print(p)


# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr) # For mapping functions

# Run regression analysis separately for each variable
regression_results_Age <- long_data %>%
  group_by(DescriptiveName) %>%
  nest() %>%
  mutate(
    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
  ) %>%
  select(DescriptiveName, Intercept, Slope, P_Value, R_Squared) # Select relevant columns

# Print regression summaries with effect size
print(regression_results_Age)
View (regression_results_Age)

############SPLIT BY COHORT################

# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr) # For mapping functions

# Define significant variables
significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")

# Define real descriptive names for variables
descriptive_names <- c(
  "ST38TA" = "Left Lingual CT",
  "ST40TA" = "Left Middle Temporal CT",
  "ST51TA" = "Left Precentral CT",
  "ST85TA" = "Right Fusiform CT",
  "ST99TA" = "Right Middle Temporal CT",
  "ST51SA" = "Left Precentral SA"
)

# Subset dataset for TBI and Control groups
tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
control_data <- MichelleProjectclean %>% filter(COHORT == 3)

# Combine both groups for plotting
combined_data <- bind_rows(
  tbi_data %>% mutate(Group = "TBI"),
  control_data %>% mutate(Group = "Control")
)

# Convert data to long format for ggplot
long_data <- combined_data %>%
  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))

# Generate scatterplot with jitter, regression lines, and separate panels for TBI & Control
p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = Group)) +
  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
  geom_smooth(method = "lm", se = TRUE, aes(fill = Group), alpha = 0.2) +  # Regression lines
  scale_color_manual(values = c("red", "blue")) +  # Colors for TBI & Control
  scale_fill_manual(values = c("red", "blue")) +   # Fill for regression bands
  facet_wrap(~ DescriptiveName + Group, scales = "free_y") +  # Separate plots for each variable and group
  labs(
    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area by Group",
    x = "Age at Exam",
    y = "Cortical Thickness / Surface Area Value",
    color = "Group",
    fill = "Group"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Print plot
print(p)

# ----------------------------------------------
# Run regression analysis separately for each variable and group
regression_results_Age <- long_data %>%
  group_by(DescriptiveName, Group) %>%
  nest() %>%
  mutate(
    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
  ) %>%
  select(DescriptiveName, Group, Intercept, Slope, P_Value, R_Squared) # Select relevant columns

# Print regression summaries with effect size
print(regression_results_Age)
View(regression_results_Age)


# Define significant variables from ST10CV analysis
significant_SA_vars_right <- c(
  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
  "ST118SA", "ST121SA", "ST130SA","ST87SA"
)

significant_SA_vars_left <- c(
  "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
  "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
  "ST55SA", "ST56SA", "ST58SA"
)

# Create a named vector to map ST codes to full names (hemisphere + region)
full_names_SA <- c(
  "ST102SA" = "Right Paracentral",
  "ST105SA" = "Right Pars Orbitalis",
  "ST108SA" = "Right Postcentral",
  "ST109SA" = "Right Posterior Cingulate",
  "ST110SA" = "Right Precentral",
  "ST111SA" = "Right Precuneus",
  "ST114SA" = "Right Rostral Middle Frontal",
  "ST115SA" = "Right Superior Frontal",
  "ST118SA" = "Right Supramarginal",
  "ST121SA" = "Right Transverse Temporal",
  "ST130SA" = "Right Insula",
  "ST26SA" = "Left Fusiform",
  "ST28SA" = "Left Hemisphere WM",
  "ST31SA" = "Left Inferior Parietal",
  "ST32SA" = "Left Inferior Temporal",
  "ST34SA" = "Left Isthmus Cingulate",
  "ST36SA" = "Left Lateral Orbitofrontal",
  "ST39SA" = "Left Medial Orbitofrontal",
  "ST40SA" = "Left Middle Temporal",
  "ST49SA" = "Left Postcentral",
  "ST50SA" = "Left Posterior Cingulate",
  "ST51SA" = "Left Precentral",
  "ST52SA" = "Left Precuneus",
  "ST54SA" = "Left Rostral Anterior Cingulate",
  "ST55SA" = "Left Rostral Middle Frontal",
  "ST56SA" = "Left Superior Frontal",
  "ST58SA" = "Left Superior Temporal",
  "ST87SA" = "Right Hemisphere WM"
)


# Subset the dataset for TBI and Control groups
tbi_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 2, ]  # Adjust TBI label
control_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 3, ]  # Adjust Control label

# Initialize lists to store correlation results
tbi_correlations_ICV <- list()
control_correlations_ICV <- list()

# Loop through each significant SA variable to compute correlations with ST10CV
for (var in significant_SA_vars_right) {
  # Compute correlation for TBI group
  tbi_cor_ICV <- cor.test(tbi_data_ICV[[var]], tbi_data_ICV$ST10CV, method = "pearson")
  
  # Compute correlation for Control group
  control_cor_ICV <- cor.test(control_data_ICV[[var]], control_data_ICV$ST10CV, method = "pearson")
  
  # Store results in the lists
  tbi_correlations_ICV [[var]] <- list(
    Correlation = tbi_cor_ICV$estimate,
    P_Value = tbi_cor_ICV$p.value
  )
  
  control_correlations_ICV [[var]] <- list(
    Correlation = control_cor_ICV$estimate,
    P_Value = control_cor_ICV$p.value
  )
}

# Combine the results into data frames for easier viewing
tbi_results_ICV <- data.frame(
  Variable = names(tbi_correlations_ICV),
  Correlation = sapply(tbi_correlations_ICV, function(x) x$Correlation),
  P_Value = sapply(tbi_correlations_ICV, function(x) x$P_Value)
)

control_results_ICV <- data.frame(
  Variable = names(control_correlations_ICV),
  Correlation = sapply(control_correlations_ICV, function(x) x$Correlation),
  P_Value = sapply(control_correlations_ICV, function(x) x$P_Value)
)

# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)

# Define significant variables for right and left hemispheres
significant_SA_vars_right <- c(
  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
  "ST118SA", "ST121SA", "ST130SA", "ST87SA"
)

significant_SA_vars_left <- c(
  "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
  "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
  "ST55SA", "ST56SA", "ST58SA"
)

# Map descriptive names to ST codes
full_names_SA <- c(
  "ST102SA" = "Paracentral",
  "ST105SA" = "Pars Orbitalis",
  "ST108SA" = "Postcentral",
  "ST109SA" = "Posterior Cingulate",
  "ST110SA" = "Precentral",
  "ST111SA" = "Precuneus",
  "ST114SA" = "Rostral Middle Frontal",
  "ST115SA" = "Superior Frontal",
  "ST118SA" = "Supramarginal",
  "ST121SA" = "Transverse Temporal",
  "ST130SA" = "Insula",
  "ST26SA" = "Fusiform",
  "ST28SA" = "Hemisphere WM",
  "ST31SA" = "Inferior Parietal",
  "ST32SA" = "Inferior Temporal",
  "ST34SA" = "Isthmus Cingulate",
  "ST36SA" = "Lateral Orbitofrontal",
  "ST39SA" = "Medial Orbitofrontal",
  "ST40SA" = "Middle Temporal",
  "ST49SA" = "Postcentral",
  "ST50SA" = "Posterior Cingulate",
  "ST51SA" = "Precentral",
  "ST52SA" = "Precuneus",
  "ST54SA" = "Rostral Anterior Cingulate",
  "ST55SA" = "Rostral Middle Frontal",
  "ST56SA" = "Superior Frontal",
  "ST58SA" = "Superior Temporal",
  "ST87SA" = "Hemisphere WM"
)

# Subset dataset for TBI and Control groups
tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
control_data <- MichelleProjectclean %>% filter(COHORT == 3)

# Combine both groups for plotting
combined_data <- bind_rows(
  tbi_data %>% mutate(Group = "TBI"),
  control_data %>% mutate(Group = "Control")
)


# Convert data to long format for both hemispheres
long_data <- combined_data %>%
  select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
  pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
               names_to = "Variable", values_to = "Value") %>%
  mutate(
    Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
    DescriptiveName = full_names_SA[Variable]
  )

# ---- Plot for TBI Group ----
p_tbi <- ggplot(long_data %>% filter(Group == "TBI"), 
                aes(x = ST10CV, y = Value, color = Hemisphere)) +
  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +  # Regression lines
  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
  scale_color_manual(values = c("red", "blue")) +  # Red for Left, Blue for Right
  scale_fill_manual(values = c("red", "blue")) +
  labs(
    title = "Scatterplot of ICV vs. Surface Area (TBI Group)",
    x = "Intracranial Volume (ST10CV)",
    y = "Surface Area Value",
    color = "Hemisphere"
  ) +
  theme_minimal() +
  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))

# ---- Plot for Control Group ----
p_control <- ggplot(long_data %>% filter(Group == "Control"), 
                    aes(x = ST10CV, y = Value, color = Hemisphere)) +
  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +
  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +
  facet_wrap(~ DescriptiveName, scales = "free_y") +
  scale_color_manual(values = c("red", "blue")) +
  scale_fill_manual(values = c("red", "blue")) +
  labs(
    title = "Scatterplot of ICV vs. Surface Area (Control Group)",
    x = "Intracranial Volume (ST10CV)",
    y = "Surface Area Value",
    color = "Hemisphere"
  ) +
  theme_minimal() +
  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))

# Print plots
print(p_tbi)
print(p_control)

> # Subset the dataset for TBI and Control groups
  > tbi_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 2, ]  # Adjust TBI label
> control_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 3, ]  # Adjust Control label
> # Initialize lists to store correlation results
  > tbi_correlations_ICV <- list()
> control_correlations_ICV <- list()
> # Loop through each significant SA variable to compute correlations with ST10CV
  > for (var in significant_SA_vars_right) {
    +   # Compute correlation for TBI group
      +   tbi_cor_ICV <- cor.test(tbi_data_ICV[[var]], tbi_data_ICV$ST10CV, method = "pearson")
      +   
        +   # Compute correlation for Control group
        +   control_cor_ICV <- cor.test(control_data_ICV[[var]], control_data_ICV$ST10CV, method = "pearson")
        +   
          +   # Store results in the lists
          +   tbi_correlations_ICV [[var]] <- list(
            +     Correlation = tbi_cor_ICV$estimate,
            +     P_Value = tbi_cor_ICV$p.value
            +   )
          +   
            +   control_correlations_ICV [[var]] <- list(
              +     Correlation = control_cor_ICV$estimate,
              +     P_Value = control_cor_ICV$p.value
              +   )
            + }
> # Combine the results into data frames for easier viewing
  > tbi_results_ICV <- data.frame(
    +   Variable = names(tbi_correlations_ICV),
    +   Correlation = sapply(tbi_correlations_ICV, function(x) x$Correlation),
    +   P_Value = sapply(tbi_correlations_ICV, function(x) x$P_Value)
    + )
> control_results_ICV <- data.frame(
  +   Variable = names(control_correlations_ICV),
  +   Correlation = sapply(control_correlations_ICV, function(x) x$Correlation),
  +   P_Value = sapply(control_correlations_ICV, function(x) x$P_Value)
  + )
> # Load required libraries
  > library(ggplot2)
> library(dplyr)
> library(tidyr)
> library(purrr)
> # Define significant variables for right and left hemispheres
  > significant_SA_vars_right <- c(
    +   "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
    +   "ST118SA", "ST121SA", "ST130SA", "ST87SA"
    + )
> significant_SA_vars_left <- c(
  +   "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
  +   "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
  +   "ST55SA", "ST56SA", "ST58SA"
  + )
> # Map descriptive names to ST codes
  > full_names_SA <- c(
    +   "ST102SA" = "Paracentral",
    +   "ST105SA" = "Pars Orbitalis",
    +   "ST108SA" = "Postcentral",
    +   "ST109SA" = "Posterior Cingulate",
    +   "ST110SA" = "Precentral",
    +   "ST111SA" = "Precuneus",
    +   "ST114SA" = "Rostral Middle Frontal",
    +   "ST115SA" = "Superior Frontal",
    +   "ST118SA" = "Supramarginal",
    +   "ST121SA" = "Transverse Temporal",
    +   "ST130SA" = "Insula",
    +   "ST26SA" = "Fusiform",
    +   "ST28SA" = "Hemisphere WM",
    +   "ST31SA" = "Inferior Parietal",
    +   "ST32SA" = "Inferior Temporal",
    +   "ST34SA" = "Isthmus Cingulate",
    +   "ST36SA" = "Lateral Orbitofrontal",
    +   "ST39SA" = "Medial Orbitofrontal",
    +   "ST40SA" = "Middle Temporal",
    +   "ST49SA" = "Postcentral",
    +   "ST50SA" = "Posterior Cingulate",
    +   "ST51SA" = "Precentral",
    +   "ST52SA" = "Precuneus",
    +   "ST54SA" = "Rostral Anterior Cingulate",
    +   "ST55SA" = "Rostral Middle Frontal",
    +   "ST56SA" = "Superior Frontal",
    +   "ST58SA" = "Superior Temporal",
    +   "ST87SA" = "Hemisphere WM"
    + )
> # Subset dataset for TBI and Control groups
  > tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
> control_data <- MichelleProjectclean %>% filter(COHORT == 3)
> # Combine both groups for plotting
  > combined_data <- bind_rows(
    +   tbi_data %>% mutate(Group = "TBI"),
    +   control_data %>% mutate(Group = "Control")
    + )
> # Convert data to long format for both hemispheres
  > long_data <- combined_data %>%
  +   select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
  +   pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                   +                names_to = "Variable", values_to = "Value") %>%
  +   mutate(
    +     Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
    +     DescriptiveName = full_names_SA[Variable]
    +   )
Error in select(., ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)),  : 
                  unused arguments (ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group)
                > # Convert data to long format for both hemispheres
                  > long_data <- combined_data %>%
                  +   select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                  +   pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                   +                names_to = "Variable", values_to = "Value") %>%
                  +   mutate(
                    +     Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                    +     DescriptiveName = full_names_SA[Variable]
                    +   )
                Error in select(., ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)),  : 
                                  unused arguments (ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group)
                                > # Subset dataset for TBI and Control groups
                                  > tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                > control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                > # Combine both groups for plotting
                                  > combined_data <- bind_rows(
                                    +   tbi_data %>% mutate(Group = "TBI"),
                                    +   control_data %>% mutate(Group = "Control")
                                    + )
                                > # Convert data to long format for both hemispheres
                                  > long_data <- combined_data %>%
                                  +   select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                                  +   pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                   +                names_to = "Variable", values_to = "Value") %>%
                                  +   mutate(
                                    +     Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                    +     DescriptiveName = full_names_SA[Variable]
                                    +   )
                                Error in select(., ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)),  : 
                                                  unused arguments (ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group)
                                                > # ---- Plot for TBI Group ----
                                                > p_tbi <- ggplot(long_data %>% filter(Group == "TBI"), 
                                                                  +                 aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                  +   geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                  +   geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +  # Regression lines
                                                  +   facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                  +   scale_color_manual(values = c("red", "blue")) +  # Red for Left, Blue for Right
                                                  +   scale_fill_manual(values = c("red", "blue")) +
                                                  +   labs(
                                                    +     title = "Scatterplot of ICV vs. Surface Area (TBI Group)",
                                                    +     x = "Intracranial Volume (ST10CV)",
                                                    +     y = "Surface Area Value",
                                                    +     color = "Hemisphere"
                                                    +   ) +
                                                  +   theme_minimal() +
                                                  +   theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                Error: object 'long_data' not found
                                                > # ---- Plot for Control Group ----
                                                > p_control <- ggplot(long_data %>% filter(Group == "Control"), 
                                                                      +                     aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                  +   geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +
                                                  +   geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +
                                                  +   facet_wrap(~ DescriptiveName, scales = "free_y") +
                                                  +   scale_color_manual(values = c("red", "blue")) +
                                                  +   scale_fill_manual(values = c("red", "blue")) +
                                                  +   labs(
                                                    +     title = "Scatterplot of ICV vs. Surface Area (Control Group)",
                                                    +     x = "Intracranial Volume (ST10CV)",
                                                    +     y = "Surface Area Value",
                                                    +     color = "Hemisphere"
                                                    +   ) +
                                                  +   theme_minimal() +
                                                  +   theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                Error: object 'long_data' not found
                                                > # Print plots
                                                  > print(p_tbi)
                                                Error: object 'p_tbi' not found
                                                > print(p_control)
                                                Error: object 'p_control' not found
                                                
                                                # Load required libraries
                                                library(tidyverse)
                                                library(broom)
                                                
                                                # Subset dataset for TBI and Control groups
                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                
                                                # Combine both groups
                                                combined_data <- bind_rows(
                                                  tbi_data %>% mutate(Group = "TBI"),
                                                  control_data %>% mutate(Group = "Control")
                                                )
                                                
                                                # Convert Group to a factor
                                                combined_data <- combined_data %>%
                                                  mutate(Group = factor(Group, levels = c("Control", "TBI"))) # Control as reference
                                                
                                                # ---- Linear Regression for Each Group ----
                                                # Function to run regression for each surface area variable
                                                run_regression <- function(var) {
                                                  formula <- as.formula(paste(var, "~ ST10CV"))
                                                  model <- lm(formula, data = combined_data)
                                                  return(tidy(model))  # Extract coefficients
                                                }
                                                
                                                # Apply regression to all significant variables
                                                regression_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), run_regression, .id = "Variable")
                                                
                                                # Print regression results
                                                print(regression_results)
                                                View (regression_results)
                                                
                                                # ---- Regression Model with Interaction (Group as Moderator) ----
                                                # Create an interaction model to compare slopes
                                                interaction_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), function(var) {
                                                  formula <- as.formula(paste(var, "~ ST10CV * Group"))  # Interaction term
                                                  model <- lm(formula, data = combined_data)
                                                  return(tidy(model))
                                                }, .id = "Variable")
                                                
                                                # Print interaction model results
                                                print(interaction_results)
                                                
                                                # ---- Extract R-squared values for interpretation ----
                                                r_squared_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), function(var) {
                                                  model <- lm(as.formula(paste(var, "~ ST10CV * Group")), data = combined_data)
                                                  tibble(Variable = var, R_squared = summary(model)$r.squared)
                                                })
                                                
                                                # Print R-squared values
                                                print(r_squared_results)
                                                
                                                
                                                
                                                # Load necessary libraries
                                                library(ggplot2)
                                                library(dplyr)
                                                library(tidyr)
                                                
                                                
                                                # Define significant variables
                                                significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")
                                                
                                                # Define real descriptive names for variables
                                                descriptive_names <- c(
                                                  "ST38TA" = "Left Lingual CT",
                                                  "ST40TA" = "Left Middle Temporal CT",
                                                  "ST51TA" = "Left Precentral CT",
                                                  "ST85TA" = "Right Fusiform CT",
                                                  "ST99TA" = "Right Middle Temporal CT",
                                                  "ST51SA" = "Left Precentral SA"
                                                )
                                                
                                                # Subset dataset for TBI and Control groups
                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                
                                                # Combine both groups for plotting
                                                combined_data <- bind_rows(
                                                  tbi_data %>% mutate(Group = "TBI"),
                                                  control_data %>% mutate(Group = "Control")
                                                )
                                                
                                                # Convert data to long format for ggplot
                                                long_data <- combined_data %>%
                                                  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
                                                  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
                                                  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))
                                                
                                                # Generate scatterplot with jitter, regression lines, and regression summaries
                                                p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = DescriptiveName)) +
                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = DescriptiveName), alpha = 0.2) +  # Regression lines
                                                  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "brown")) +  # Custom colors
                                                  scale_fill_manual(values = c("red", "blue", "green", "purple", "orange", "brown")) +  # Fill for regression bands
                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                  labs(
                                                    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area",
                                                    x = "Age at Exam",
                                                    y = "Cortical Thickness / Surface Area Value",
                                                    color = "Brain Region"
                                                  ) +
                                                  theme_minimal() +
                                                  theme(
                                                    legend.position = "right",
                                                    axis.text.x = element_text(angle = 45, hjust = 1)
                                                  )
                                                
                                                # Print plot
                                                print(p)
                                                
                                                
                                                # Load required libraries
                                                library(ggplot2)
                                                library(dplyr)
                                                library(tidyr)
                                                library(purrr) # For mapping functions
                                                
                                                # Run regression analysis separately for each variable
                                                regression_results_Age <- long_data %>%
                                                  group_by(DescriptiveName) %>%
                                                  nest() %>%
                                                  mutate(
                                                    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
                                                    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
                                                    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
                                                    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
                                                    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
                                                  ) %>%
                                                  select(DescriptiveName, Intercept, Slope, P_Value, R_Squared) # Select relevant columns
                                                
                                                # Print regression summaries with effect size
                                                print(regression_results_Age)
                                                View (regression_results_Age)
                                                
                                                ############SPLIT BY COHORT################
                                                
                                                # Load required libraries
                                                library(ggplot2)
                                                library(dplyr)
                                                library(tidyr)
                                                library(purrr) # For mapping functions
                                                
                                                # Define significant variables
                                                significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")
                                                
                                                # Define real descriptive names for variables
                                                descriptive_names <- c(
                                                  "ST38TA" = "Left Lingual CT",
                                                  "ST40TA" = "Left Middle Temporal CT",
                                                  "ST51TA" = "Left Precentral CT",
                                                  "ST85TA" = "Right Fusiform CT",
                                                  "ST99TA" = "Right Middle Temporal CT",
                                                  "ST51SA" = "Left Precentral SA"
                                                )
                                                
                                                # Subset dataset for TBI and Control groups
                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                
                                                # Combine both groups for plotting
                                                combined_data <- bind_rows(
                                                  tbi_data %>% mutate(Group = "TBI"),
                                                  control_data %>% mutate(Group = "Control")
                                                )
                                                
                                                # Convert data to long format for ggplot
                                                long_data <- combined_data %>%
                                                  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
                                                  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
                                                  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))
                                                
                                                # Generate scatterplot with jitter, regression lines, and separate panels for TBI & Control
                                                p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = Group)) +
                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Group), alpha = 0.2) +  # Regression lines
                                                  scale_color_manual(values = c("red", "blue")) +  # Colors for TBI & Control
                                                  scale_fill_manual(values = c("red", "blue")) +   # Fill for regression bands
                                                  facet_wrap(~ DescriptiveName + Group, scales = "free_y") +  # Separate plots for each variable and group
                                                  labs(
                                                    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area by Group",
                                                    x = "Age at Exam",
                                                    y = "Cortical Thickness / Surface Area Value",
                                                    color = "Group",
                                                    fill = "Group"
                                                  ) +
                                                  theme_minimal() +
                                                  theme(
                                                    legend.position = "right",
                                                    axis.text.x = element_text(angle = 45, hjust = 1)
                                                  )
                                                
                                                # Print plot
                                                print(p)
                                                
                                                # ----------------------------------------------
                                                # Run regression analysis separately for each variable and group
                                                regression_results_Age <- long_data %>%
                                                  group_by(DescriptiveName, Group) %>%
                                                  nest() %>%
                                                  mutate(
                                                    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
                                                    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
                                                    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
                                                    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
                                                    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
                                                  ) %>%
                                                  select(DescriptiveName, Group, Intercept, Slope, P_Value, R_Squared) # Select relevant columns
                                                
                                                # Print regression summaries with effect size
                                                print(regression_results_Age)
                                                View(regression_results_Age)
                                                
                                                
                                                # Define significant variables from ST10CV analysis
                                                significant_SA_vars_right <- c(
                                                  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
                                                  "ST118SA", "ST121SA", "ST130SA","ST87SA"
                                                )
                                                
                                                significant_SA_vars_left <- c(
                                                  "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
                                                  "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
                                                  "ST55SA", "ST56SA", "ST58SA"
                                                )
                                                
                                                # Create a named vector to map ST codes to full names (hemisphere + region)
                                                full_names_SA <- c(
                                                  "ST102SA" = "Right Paracentral",
                                                  "ST105SA" = "Right Pars Orbitalis",
                                                  "ST108SA" = "Right Postcentral",
                                                  "ST109SA" = "Right Posterior Cingulate",
                                                  "ST110SA" = "Right Precentral",
                                                  "ST111SA" = "Right Precuneus",
                                                  "ST114SA" = "Right Rostral Middle Frontal",
                                                  "ST115SA" = "Right Superior Frontal",
                                                  "ST118SA" = "Right Supramarginal",
                                                  "ST121SA" = "Right Transverse Temporal",
                                                  "ST130SA" = "Right Insula",
                                                  "ST26SA" = "Left Fusiform",
                                                  "ST28SA" = "Left Hemisphere WM",
                                                  "ST31SA" = "Left Inferior Parietal",
                                                  "ST32SA" = "Left Inferior Temporal",
                                                  "ST34SA" = "Left Isthmus Cingulate",
                                                  "ST36SA" = "Left Lateral Orbitofrontal",
                                                  "ST39SA" = "Left Medial Orbitofrontal",
                                                  "ST40SA" = "Left Middle Temporal",
                                                  "ST49SA" = "Left Postcentral",
                                                  "ST50SA" = "Left Posterior Cingulate",
                                                  "ST51SA" = "Left Precentral",
                                                  "ST52SA" = "Left Precuneus",
                                                  "ST54SA" = "Left Rostral Anterior Cingulate",
                                                  "ST55SA" = "Left Rostral Middle Frontal",
                                                  "ST56SA" = "Left Superior Frontal",
                                                  "ST58SA" = "Left Superior Temporal",
                                                  "ST87SA" = "Right Hemisphere WM"
                                                )
                                                
                                                
                                                # Subset the dataset for TBI and Control groups
                                                tbi_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 2, ]  # Adjust TBI label
                                                control_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 3, ]  # Adjust Control label
                                                
                                                # Initialize lists to store correlation results
                                                tbi_correlations_ICV <- list()
                                                control_correlations_ICV <- list()
                                                
                                                # Loop through each significant SA variable to compute correlations with ST10CV
                                                for (var in significant_SA_vars_right) {
                                                  # Compute correlation for TBI group
                                                  tbi_cor_ICV <- cor.test(tbi_data_ICV[[var]], tbi_data_ICV$ST10CV, method = "pearson")
                                                  
                                                  # Compute correlation for Control group
                                                  control_cor_ICV <- cor.test(control_data_ICV[[var]], control_data_ICV$ST10CV, method = "pearson")
                                                  
                                                  # Store results in the lists
                                                  tbi_correlations_ICV [[var]] <- list(
                                                    Correlation = tbi_cor_ICV$estimate,
                                                    P_Value = tbi_cor_ICV$p.value
                                                  )
                                                  
                                                  control_correlations_ICV [[var]] <- list(
                                                    Correlation = control_cor_ICV$estimate,
                                                    P_Value = control_cor_ICV$p.value
                                                  )
                                                }
                                                
                                                # Combine the results into data frames for easier viewing
                                                tbi_results_ICV <- data.frame(
                                                  Variable = names(tbi_correlations_ICV),
                                                  Correlation = sapply(tbi_correlations_ICV, function(x) x$Correlation),
                                                  P_Value = sapply(tbi_correlations_ICV, function(x) x$P_Value)
                                                )
                                                
                                                control_results_ICV <- data.frame(
                                                  Variable = names(control_correlations_ICV),
                                                  Correlation = sapply(control_correlations_ICV, function(x) x$Correlation),
                                                  P_Value = sapply(control_correlations_ICV, function(x) x$P_Value)
                                                )
                                                
                                                # Load required libraries
                                                library(ggplot2)
                                                library(dplyr)
                                                library(tidyr)
                                                library(purrr)
                                                
                                                # Define significant variables for right and left hemispheres
                                                significant_SA_vars_right <- c(
                                                  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
                                                  "ST118SA", "ST121SA", "ST130SA", "ST87SA"
                                                )
                                                
                                                significant_SA_vars_left <- c(
                                                  "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
                                                  "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
                                                  "ST55SA", "ST56SA", "ST58SA"
                                                )
                                                
                                                # Map descriptive names to ST codes
                                                full_names_SA <- c(
                                                  "ST102SA" = "Paracentral",
                                                  "ST105SA" = "Pars Orbitalis",
                                                  "ST108SA" = "Postcentral",
                                                  "ST109SA" = "Posterior Cingulate",
                                                  "ST110SA" = "Precentral",
                                                  "ST111SA" = "Precuneus",
                                                  "ST114SA" = "Rostral Middle Frontal",
                                                  "ST115SA" = "Superior Frontal",
                                                  "ST118SA" = "Supramarginal",
                                                  "ST121SA" = "Transverse Temporal",
                                                  "ST130SA" = "Insula",
                                                  "ST26SA" = "Fusiform",
                                                  "ST28SA" = "Hemisphere WM",
                                                  "ST31SA" = "Inferior Parietal",
                                                  "ST32SA" = "Inferior Temporal",
                                                  "ST34SA" = "Isthmus Cingulate",
                                                  "ST36SA" = "Lateral Orbitofrontal",
                                                  "ST39SA" = "Medial Orbitofrontal",
                                                  "ST40SA" = "Middle Temporal",
                                                  "ST49SA" = "Postcentral",
                                                  "ST50SA" = "Posterior Cingulate",
                                                  "ST51SA" = "Precentral",
                                                  "ST52SA" = "Precuneus",
                                                  "ST54SA" = "Rostral Anterior Cingulate",
                                                  "ST55SA" = "Rostral Middle Frontal",
                                                  "ST56SA" = "Superior Frontal",
                                                  "ST58SA" = "Superior Temporal",
                                                  "ST87SA" = "Hemisphere WM"
                                                )
                                                
                                                # Subset dataset for TBI and Control groups
                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                
                                                # Combine both groups for plotting
                                                combined_data <- bind_rows(
                                                  tbi_data %>% mutate(Group = "TBI"),
                                                  control_data %>% mutate(Group = "Control")
                                                )
                                                
                                                
                                                # Convert data to long format for both hemispheres
                                                long_data <- combined_data %>%
                                                  select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                                                  pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                               names_to = "Variable", values_to = "Value") %>%
                                                  mutate(
                                                    Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                                    DescriptiveName = full_names_SA[Variable]
                                                  )
                                                
                                                # ---- Plot for TBI Group ----
                                                p_tbi <- ggplot(long_data %>% filter(Group == "TBI"), 
                                                                aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +  # Regression lines
                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                  scale_color_manual(values = c("red", "blue")) +  # Red for Left, Blue for Right
                                                  scale_fill_manual(values = c("red", "blue")) +
                                                  labs(
                                                    title = "Scatterplot of ICV vs. Surface Area (TBI Group)",
                                                    x = "Intracranial Volume (ST10CV)",
                                                    y = "Surface Area Value",
                                                    color = "Hemisphere"
                                                  ) +
                                                  theme_minimal() +
                                                  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                
                                                # ---- Plot for Control Group ----
                                                p_control <- ggplot(long_data %>% filter(Group == "Control"), 
                                                                    aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +
                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +
                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +
                                                  scale_color_manual(values = c("red", "blue")) +
                                                  scale_fill_manual(values = c("red", "blue")) +
                                                  labs(
                                                    title = "Scatterplot of ICV vs. Surface Area (Control Group)",
                                                    x = "Intracranial Volume (ST10CV)",
                                                    y = "Surface Area Value",
                                                    color = "Hemisphere"
                                                  ) +
                                                  theme_minimal() +
                                                  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                
                                                # Print plots
                                                print(p_tbi)
                                                print(p_control)
                                                
                                                > # Subset the dataset for TBI and Control groups
                                                  > tbi_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 2, ]  # Adjust TBI label
                                                > control_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 3, ]  # Adjust Control label
                                                > # Initialize lists to store correlation results
                                                  > tbi_correlations_ICV <- list()
                                                > control_correlations_ICV <- list()
                                                > # Loop through each significant SA variable to compute correlations with ST10CV
                                                  > for (var in significant_SA_vars_right) {
                                                    +   # Compute correlation for TBI group
                                                      +   tbi_cor_ICV <- cor.test(tbi_data_ICV[[var]], tbi_data_ICV$ST10CV, method = "pearson")
                                                      +   
                                                        +   # Compute correlation for Control group
                                                        +   control_cor_ICV <- cor.test(control_data_ICV[[var]], control_data_ICV$ST10CV, method = "pearson")
                                                        +   
                                                          +   # Store results in the lists
                                                          +   tbi_correlations_ICV [[var]] <- list(
                                                            +     Correlation = tbi_cor_ICV$estimate,
                                                            +     P_Value = tbi_cor_ICV$p.value
                                                            +   )
                                                          +   
                                                            +   control_correlations_ICV [[var]] <- list(
                                                              +     Correlation = control_cor_ICV$estimate,
                                                              +     P_Value = control_cor_ICV$p.value
                                                              +   )
                                                            + }
                                                > # Combine the results into data frames for easier viewing
                                                  > tbi_results_ICV <- data.frame(
                                                    +   Variable = names(tbi_correlations_ICV),
                                                    +   Correlation = sapply(tbi_correlations_ICV, function(x) x$Correlation),
                                                    +   P_Value = sapply(tbi_correlations_ICV, function(x) x$P_Value)
                                                    + )
                                                > control_results_ICV <- data.frame(
                                                  +   Variable = names(control_correlations_ICV),
                                                  +   Correlation = sapply(control_correlations_ICV, function(x) x$Correlation),
                                                  +   P_Value = sapply(control_correlations_ICV, function(x) x$P_Value)
                                                  + )
                                                > # Load required libraries
                                                  > library(ggplot2)
                                                > library(dplyr)
                                                > library(tidyr)
                                                > library(purrr)
                                                > # Define significant variables for right and left hemispheres
                                                  > significant_SA_vars_right <- c(
                                                    +   "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
                                                    +   "ST118SA", "ST121SA", "ST130SA", "ST87SA"
                                                    + )
                                                > significant_SA_vars_left <- c(
                                                  +   "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
                                                  +   "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
                                                  +   "ST55SA", "ST56SA", "ST58SA"
                                                  + )
                                                > # Map descriptive names to ST codes
                                                  > full_names_SA <- c(
                                                    +   "ST102SA" = "Paracentral",
                                                    +   "ST105SA" = "Pars Orbitalis",
                                                    +   "ST108SA" = "Postcentral",
                                                    +   "ST109SA" = "Posterior Cingulate",
                                                    +   "ST110SA" = "Precentral",
                                                    +   "ST111SA" = "Precuneus",
                                                    +   "ST114SA" = "Rostral Middle Frontal",
                                                    +   "ST115SA" = "Superior Frontal",
                                                    +   "ST118SA" = "Supramarginal",
                                                    +   "ST121SA" = "Transverse Temporal",
                                                    +   "ST130SA" = "Insula",
                                                    +   "ST26SA" = "Fusiform",
                                                    +   "ST28SA" = "Hemisphere WM",
                                                    +   "ST31SA" = "Inferior Parietal",
                                                    +   "ST32SA" = "Inferior Temporal",
                                                    +   "ST34SA" = "Isthmus Cingulate",
                                                    +   "ST36SA" = "Lateral Orbitofrontal",
                                                    +   "ST39SA" = "Medial Orbitofrontal",
                                                    +   "ST40SA" = "Middle Temporal",
                                                    +   "ST49SA" = "Postcentral",
                                                    +   "ST50SA" = "Posterior Cingulate",
                                                    +   "ST51SA" = "Precentral",
                                                    +   "ST52SA" = "Precuneus",
                                                    +   "ST54SA" = "Rostral Anterior Cingulate",
                                                    +   "ST55SA" = "Rostral Middle Frontal",
                                                    +   "ST56SA" = "Superior Frontal",
                                                    +   "ST58SA" = "Superior Temporal",
                                                    +   "ST87SA" = "Hemisphere WM"
                                                    + )
                                                > # Subset dataset for TBI and Control groups
                                                  > tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                > control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                > # Combine both groups for plotting
                                                  > combined_data <- bind_rows(
                                                    +   tbi_data %>% mutate(Group = "TBI"),
                                                    +   control_data %>% mutate(Group = "Control")
                                                    + )
                                                > # Convert data to long format for both hemispheres
                                                  > long_data <- combined_data %>%
                                                  +   select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                                                  +   pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                                   +                names_to = "Variable", values_to = "Value") %>%
                                                  +   mutate(
                                                    +     Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                                    +     DescriptiveName = full_names_SA[Variable]
                                                    +   )
                                                Error in select(., ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)),  : 
                                                                  unused arguments (ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group)
                                                                > # Convert data to long format for both hemispheres
                                                                  > long_data <- combined_data %>%
                                                                  +   select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                                                                  +   pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                                                   +                names_to = "Variable", values_to = "Value") %>%
                                                                  +   mutate(
                                                                    +     Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                                                    +     DescriptiveName = full_names_SA[Variable]
                                                                    +   )
                                                                Error in select(., ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)),  : 
                                                                                  unused arguments (ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group)
                                                                                > # Subset dataset for TBI and Control groups
                                                                                  > tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                                                > control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                                                > # Combine both groups for plotting
                                                                                  > combined_data <- bind_rows(
                                                                                    +   tbi_data %>% mutate(Group = "TBI"),
                                                                                    +   control_data %>% mutate(Group = "Control")
                                                                                    + )
                                                                                > # Convert data to long format for both hemispheres
                                                                                  > long_data <- combined_data %>%
                                                                                  +   select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                                                                                  +   pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                                                                   +                names_to = "Variable", values_to = "Value") %>%
                                                                                  +   mutate(
                                                                                    +     Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                                                                    +     DescriptiveName = full_names_SA[Variable]
                                                                                    +   )
                                                                                Error in select(., ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)),  : 
                                                                                                  unused arguments (ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group)
                                                                                                > # ---- Plot for TBI Group ----
                                                                                                > p_tbi <- ggplot(long_data %>% filter(Group == "TBI"), 
                                                                                                                  +                 aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                                                                  +   geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                                                                  +   geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +  # Regression lines
                                                                                                  +   facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                                                                  +   scale_color_manual(values = c("red", "blue")) +  # Red for Left, Blue for Right
                                                                                                  +   scale_fill_manual(values = c("red", "blue")) +
                                                                                                  +   labs(
                                                                                                    +     title = "Scatterplot of ICV vs. Surface Area (TBI Group)",
                                                                                                    +     x = "Intracranial Volume (ST10CV)",
                                                                                                    +     y = "Surface Area Value",
                                                                                                    +     color = "Hemisphere"
                                                                                                    +   ) +
                                                                                                  +   theme_minimal() +
                                                                                                  +   theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                                                                Error: object 'long_data' not found
                                                                                                > # ---- Plot for Control Group ----
                                                                                                > p_control <- ggplot(long_data %>% filter(Group == "Control"), 
                                                                                                                      +                     aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                                                                  +   geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +
                                                                                                  +   geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +
                                                                                                  +   facet_wrap(~ DescriptiveName, scales = "free_y") +
                                                                                                  +   scale_color_manual(values = c("red", "blue")) +
                                                                                                  +   scale_fill_manual(values = c("red", "blue")) +
                                                                                                  +   labs(
                                                                                                    +     title = "Scatterplot of ICV vs. Surface Area (Control Group)",
                                                                                                    +     x = "Intracranial Volume (ST10CV)",
                                                                                                    +     y = "Surface Area Value",
                                                                                                    +     color = "Hemisphere"
                                                                                                    +   ) +
                                                                                                  +   theme_minimal() +
                                                                                                  +   theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                                                                Error: object 'long_data' not found
                                                                                                > # Print plots
                                                                                                  > print(p_tbi)
                                                                                                Error: object 'p_tbi' not found
                                                                                                > print(p_control)
                                                                                                Error: object 'p_control' not found
                                                                                                
                                                                                                # Load required libraries
                                                                                                library(tidyverse)
                                                                                                library(broom)
                                                                                                
                                                                                                # Subset dataset for TBI and Control groups
                                                                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                                                                
                                                                                                # Combine both groups
                                                                                                combined_data <- bind_rows(
                                                                                                  tbi_data %>% mutate(Group = "TBI"),
                                                                                                  control_data %>% mutate(Group = "Control")
                                                                                                )
                                                                                                
                                                                                                # Convert Group to a factor
                                                                                                combined_data <- combined_data %>%
                                                                                                  mutate(Group = factor(Group, levels = c("Control", "TBI"))) # Control as reference
                                                                                                
                                                                                                # ---- Linear Regression for Each Group ----
                                                                                                # Function to run regression for each surface area variable
                                                                                                run_regression <- function(var) {
                                                                                                  formula <- as.formula(paste(var, "~ ST10CV"))
                                                                                                  model <- lm(formula, data = combined_data)
                                                                                                  return(tidy(model))  # Extract coefficients
                                                                                                }
                                                                                                
                                                                                                # Apply regression to all significant variables
                                                                                                regression_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), run_regression, .id = "Variable")
                                                                                                
                                                                                                # Print regression results
                                                                                                print(regression_results)
                                                                                                View (regression_results)
                                                                                                
                                                                                                # ---- Regression Model with Interaction (Group as Moderator) ----
                                                                                                # Create an interaction model to compare slopes
                                                                                                interaction_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), function(var) {
                                                                                                  formula <- as.formula(paste(var, "~ ST10CV * Group"))  # Interaction term
                                                                                                  model <- lm(formula, data = combined_data)
                                                                                                  return(tidy(model))
                                                                                                }, .id = "Variable")
                                                                                                
                                                                                                # Print interaction model results
                                                                                                print(interaction_results)
                                                                                                
                                                                                                # ---- Extract R-squared values for interpretation ----
                                                                                                r_squared_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), function(var) {
                                                                                                  model <- lm(as.formula(paste(var, "~ ST10CV * Group")), data = combined_data)
                                                                                                  tibble(Variable = var, R_squared = summary(model)$r.squared)
                                                                                                })
                                                                                                
                                                                                                # Print R-squared values
                                                                                                print(r_squared_results)
                                                                                                
                                                                                                
                                                                                                
                                                                                                ###################THIS WAS EXPORTED FROM THE ADNI EXPLORE LAST R SCRIPT. I NEED TO EDIT THIS AND FIGURE OUT WHY ITS NOT PULLING UP MY CORRELATIONS
                                                                                                
                                                                                                # Load necessary libraries
                                                                                                library(ggplot2)
                                                                                                library(dplyr)
                                                                                                library(tidyr)
                                                                                                
                                                                                                
                                                                                                # Define significant variables
                                                                                                significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")
                                                                                                
                                                                                                # Define real descriptive names for variables
                                                                                                descriptive_names <- c(
                                                                                                  "ST38TA" = "Left Lingual CT",
                                                                                                  "ST40TA" = "Left Middle Temporal CT",
                                                                                                  "ST51TA" = "Left Precentral CT",
                                                                                                  "ST85TA" = "Right Fusiform CT",
                                                                                                  "ST99TA" = "Right Middle Temporal CT",
                                                                                                  "ST51SA" = "Left Precentral SA"
                                                                                                )
                                                                                                
                                                                                                # Subset dataset for TBI and Control groups
                                                                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                                                                
                                                                                                # Combine both groups for plotting
                                                                                                combined_data <- bind_rows(
                                                                                                  tbi_data %>% mutate(Group = "TBI"),
                                                                                                  control_data %>% mutate(Group = "Control")
                                                                                                )
                                                                                                
                                                                                                # Convert data to long format for ggplot
                                                                                                long_data <- combined_data %>%
                                                                                                  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
                                                                                                  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
                                                                                                  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))
                                                                                                
                                                                                                # Generate scatterplot with jitter, regression lines, and regression summaries
                                                                                                p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = DescriptiveName)) +
                                                                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = DescriptiveName), alpha = 0.2) +  # Regression lines
                                                                                                  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "brown")) +  # Custom colors
                                                                                                  scale_fill_manual(values = c("red", "blue", "green", "purple", "orange", "brown")) +  # Fill for regression bands
                                                                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                                                                  labs(
                                                                                                    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area",
                                                                                                    x = "Age at Exam",
                                                                                                    y = "Cortical Thickness / Surface Area Value",
                                                                                                    color = "Brain Region"
                                                                                                  ) +
                                                                                                  theme_minimal() +
                                                                                                  theme(
                                                                                                    legend.position = "right",
                                                                                                    axis.text.x = element_text(angle = 45, hjust = 1)
                                                                                                  )
                                                                                                
                                                                                                # Print plot
                                                                                                print(p)
                                                                                                
                                                                                                
                                                                                                # Load required libraries
                                                                                                library(ggplot2)
                                                                                                library(dplyr)
                                                                                                library(tidyr)
                                                                                                library(purrr) # For mapping functions
                                                                                                
                                                                                                # Run regression analysis separately for each variable
                                                                                                regression_results_Age <- long_data %>%
                                                                                                  group_by(DescriptiveName) %>%
                                                                                                  nest() %>%
                                                                                                  mutate(
                                                                                                    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
                                                                                                    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
                                                                                                    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
                                                                                                    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
                                                                                                    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
                                                                                                  ) %>%
                                                                                                  select(DescriptiveName, Intercept, Slope, P_Value, R_Squared) # Select relevant columns
                                                                                                
                                                                                                # Print regression summaries with effect size
                                                                                                print(regression_results_Age)
                                                                                                View (regression_results_Age)
                                                                                                
                                                                                                ############SPLIT BY COHORT################
                                                                                                
                                                                                                # Load required libraries
                                                                                                library(ggplot2)
                                                                                                library(dplyr)
                                                                                                library(tidyr)
                                                                                                library(purrr) # For mapping functions
                                                                                                
                                                                                                # Define significant variables
                                                                                                significant_CT_vars <- c("ST38TA", "ST40TA", "ST51TA", "ST85TA", "ST99TA", "ST51SA")
                                                                                                
                                                                                                # Define real descriptive names for variables
                                                                                                descriptive_names <- c(
                                                                                                  "ST38TA" = "Left Lingual CT",
                                                                                                  "ST40TA" = "Left Middle Temporal CT",
                                                                                                  "ST51TA" = "Left Precentral CT",
                                                                                                  "ST85TA" = "Right Fusiform CT",
                                                                                                  "ST99TA" = "Right Middle Temporal CT",
                                                                                                  "ST51SA" = "Left Precentral SA"
                                                                                                )
                                                                                                
                                                                                                # Subset dataset for TBI and Control groups
                                                                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                                                                
                                                                                                # Combine both groups for plotting
                                                                                                combined_data <- bind_rows(
                                                                                                  tbi_data %>% mutate(Group = "TBI"),
                                                                                                  control_data %>% mutate(Group = "Control")
                                                                                                )
                                                                                                
                                                                                                # Convert data to long format for ggplot
                                                                                                long_data <- combined_data %>%
                                                                                                  select(Age.at.Exam, all_of(significant_CT_vars), Group) %>%
                                                                                                  pivot_longer(cols = all_of(significant_CT_vars), names_to = "Variable", values_to = "Value") %>%
                                                                                                  mutate(DescriptiveName = factor(descriptive_names[Variable], levels = descriptive_names))
                                                                                                
                                                                                                # Generate scatterplot with jitter, regression lines, and separate panels for TBI & Control
                                                                                                p <- ggplot(long_data, aes(x = Age.at.Exam, y = Value, color = Group)) +
                                                                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Group), alpha = 0.2) +  # Regression lines
                                                                                                  scale_color_manual(values = c("red", "blue")) +  # Colors for TBI & Control
                                                                                                  scale_fill_manual(values = c("red", "blue")) +   # Fill for regression bands
                                                                                                  facet_wrap(~ DescriptiveName + Group, scales = "free_y") +  # Separate plots for each variable and group
                                                                                                  labs(
                                                                                                    title = "Scatterplot of Age vs. Cortical Thickness/Surface Area by Group",
                                                                                                    x = "Age at Exam",
                                                                                                    y = "Cortical Thickness / Surface Area Value",
                                                                                                    color = "Group",
                                                                                                    fill = "Group"
                                                                                                  ) +
                                                                                                  theme_minimal() +
                                                                                                  theme(
                                                                                                    legend.position = "right",
                                                                                                    axis.text.x = element_text(angle = 45, hjust = 1)
                                                                                                  )
                                                                                                
                                                                                                # Print plot
                                                                                                print(p)
                                                                                                
                                                                                                # ----------------------------------------------
                                                                                                # Run regression analysis separately for each variable and group
                                                                                                regression_results_Age <- long_data %>%
                                                                                                  group_by(DescriptiveName, Group) %>%
                                                                                                  nest() %>%
                                                                                                  mutate(
                                                                                                    Model = map(data, ~ lm(Value ~ Age.at.Exam, data = .)),  # Fit model
                                                                                                    Intercept = map_dbl(Model, ~ coef(.x)[1]),               # Extract Intercept
                                                                                                    Slope = map_dbl(Model, ~ coef(.x)[2]),                   # Extract Slope
                                                                                                    P_Value = map_dbl(Model, ~ summary(.x)$coefficients[2,4]), # Extract P-value
                                                                                                    R_Squared = map_dbl(Model, ~ summary(.x)$r.squared)      # Compute effect size (R²)
                                                                                                  ) %>%
                                                                                                  select(DescriptiveName, Group, Intercept, Slope, P_Value, R_Squared) # Select relevant columns
                                                                                                
                                                                                                # Print regression summaries with effect size
                                                                                                print(regression_results_Age)
                                                                                                View(regression_results_Age)
                                                                                                
                                                                                                
                                                                                                # Define significant variables from ST10CV analysis
                                                                                                significant_SA_vars_right <- c(
                                                                                                  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
                                                                                                  "ST118SA", "ST121SA", "ST130SA","ST87SA"
                                                                                                )
                                                                                                
                                                                                                significant_SA_vars_left <- c(
                                                                                                  "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
                                                                                                  "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
                                                                                                  "ST55SA", "ST56SA", "ST58SA"
                                                                                                )
                                                                                                
                                                                                                # Create a named vector to map ST codes to full names (hemisphere + region)
                                                                                                full_names_SA <- c(
                                                                                                  "ST102SA" = "Right Paracentral",
                                                                                                  "ST105SA" = "Right Pars Orbitalis",
                                                                                                  "ST108SA" = "Right Postcentral",
                                                                                                  "ST109SA" = "Right Posterior Cingulate",
                                                                                                  "ST110SA" = "Right Precentral",
                                                                                                  "ST111SA" = "Right Precuneus",
                                                                                                  "ST114SA" = "Right Rostral Middle Frontal",
                                                                                                  "ST115SA" = "Right Superior Frontal",
                                                                                                  "ST118SA" = "Right Supramarginal",
                                                                                                  "ST121SA" = "Right Transverse Temporal",
                                                                                                  "ST130SA" = "Right Insula",
                                                                                                  "ST26SA" = "Left Fusiform",
                                                                                                  "ST28SA" = "Left Hemisphere WM",
                                                                                                  "ST31SA" = "Left Inferior Parietal",
                                                                                                  "ST32SA" = "Left Inferior Temporal",
                                                                                                  "ST34SA" = "Left Isthmus Cingulate",
                                                                                                  "ST36SA" = "Left Lateral Orbitofrontal",
                                                                                                  "ST39SA" = "Left Medial Orbitofrontal",
                                                                                                  "ST40SA" = "Left Middle Temporal",
                                                                                                  "ST49SA" = "Left Postcentral",
                                                                                                  "ST50SA" = "Left Posterior Cingulate",
                                                                                                  "ST51SA" = "Left Precentral",
                                                                                                  "ST52SA" = "Left Precuneus",
                                                                                                  "ST54SA" = "Left Rostral Anterior Cingulate",
                                                                                                  "ST55SA" = "Left Rostral Middle Frontal",
                                                                                                  "ST56SA" = "Left Superior Frontal",
                                                                                                  "ST58SA" = "Left Superior Temporal",
                                                                                                  "ST87SA" = "Right Hemisphere WM"
                                                                                                )
                                                                                                
                                                                                                
                                                                                                # Subset the dataset for TBI and Control groups
                                                                                                tbi_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 2, ]  # Adjust TBI label
                                                                                                control_data_ICV<- MichelleProjectclean[MichelleProjectclean$COHORT == 3, ]  # Adjust Control label
                                                                                                
                                                                                                # Initialize lists to store correlation results
                                                                                                tbi_correlations_ICV <- list()
                                                                                                control_correlations_ICV <- list()
                                                                                                
                                                                                                # Loop through each significant SA variable to compute correlations with ST10CV
                                                                                                for (var in significant_SA_vars_right) {
                                                                                                  # Compute correlation for TBI group
                                                                                                  tbi_cor_ICV <- cor.test(tbi_data_ICV[[var]], tbi_data_ICV$ST10CV, method = "pearson")
                                                                                                  
                                                                                                  # Compute correlation for Control group
                                                                                                  control_cor_ICV <- cor.test(control_data_ICV[[var]], control_data_ICV$ST10CV, method = "pearson")
                                                                                                  
                                                                                                  # Store results in the lists
                                                                                                  tbi_correlations_ICV [[var]] <- list(
                                                                                                    Correlation = tbi_cor_ICV$estimate,
                                                                                                    P_Value = tbi_cor_ICV$p.value
                                                                                                  )
                                                                                                  
                                                                                                  control_correlations_ICV [[var]] <- list(
                                                                                                    Correlation = control_cor_ICV$estimate,
                                                                                                    P_Value = control_cor_ICV$p.value
                                                                                                  )
                                                                                                }
                                                                                                
                                                                                                # Combine the results into data frames for easier viewing
                                                                                                tbi_results_ICV <- data.frame(
                                                                                                  Variable = names(tbi_correlations_ICV),
                                                                                                  Correlation = sapply(tbi_correlations_ICV, function(x) x$Correlation),
                                                                                                  P_Value = sapply(tbi_correlations_ICV, function(x) x$P_Value)
                                                                                                )
                                                                                                
                                                                                                control_results_ICV <- data.frame(
                                                                                                  Variable = names(control_correlations_ICV),
                                                                                                  Correlation = sapply(control_correlations_ICV, function(x) x$Correlation),
                                                                                                  P_Value = sapply(control_correlations_ICV, function(x) x$P_Value)
                                                                                                )
                                                                                                
                                                                                                # Load required libraries
                                                                                                library(ggplot2)
                                                                                                library(dplyr)
                                                                                                library(tidyr)
                                                                                                library(purrr)
                                                                                                
                                                                                                # Define significant variables for right and left hemispheres
                                                                                                significant_SA_vars_right <- c(
                                                                                                  "ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", "ST111SA", "ST114SA", "ST115SA",
                                                                                                  "ST118SA", "ST121SA", "ST130SA", "ST87SA"
                                                                                                )
                                                                                                
                                                                                                significant_SA_vars_left <- c(
                                                                                                  "ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA",
                                                                                                  "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", "ST51SA", "ST52SA", "ST54SA",
                                                                                                  "ST55SA", "ST56SA", "ST58SA"
                                                                                                )
                                                                                                
                                                                                                # Map descriptive names to ST codes
                                                                                                full_names_SA <- c(
                                                                                                  "ST102SA" = "Paracentral",
                                                                                                  "ST105SA" = "Pars Orbitalis",
                                                                                                  "ST108SA" = "Postcentral",
                                                                                                  "ST109SA" = "Posterior Cingulate",
                                                                                                  "ST110SA" = "Precentral",
                                                                                                  "ST111SA" = "Precuneus",
                                                                                                  "ST114SA" = "Rostral Middle Frontal",
                                                                                                  "ST115SA" = "Superior Frontal",
                                                                                                  "ST118SA" = "Supramarginal",
                                                                                                  "ST121SA" = "Transverse Temporal",
                                                                                                  "ST130SA" = "Insula",
                                                                                                  "ST26SA" = "Fusiform",
                                                                                                  "ST28SA" = "Hemisphere WM",
                                                                                                  "ST31SA" = "Inferior Parietal",
                                                                                                  "ST32SA" = "Inferior Temporal",
                                                                                                  "ST34SA" = "Isthmus Cingulate",
                                                                                                  "ST36SA" = "Lateral Orbitofrontal",
                                                                                                  "ST39SA" = "Medial Orbitofrontal",
                                                                                                  "ST40SA" = "Middle Temporal",
                                                                                                  "ST49SA" = "Postcentral",
                                                                                                  "ST50SA" = "Posterior Cingulate",
                                                                                                  "ST51SA" = "Precentral",
                                                                                                  "ST52SA" = "Precuneus",
                                                                                                  "ST54SA" = "Rostral Anterior Cingulate",
                                                                                                  "ST55SA" = "Rostral Middle Frontal",
                                                                                                  "ST56SA" = "Superior Frontal",
                                                                                                  "ST58SA" = "Superior Temporal",
                                                                                                  "ST87SA" = "Hemisphere WM"
                                                                                                )
                                                                                                
                                                                                                # Subset dataset for TBI and Control groups
                                                                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                                                                
                                                                                                # Combine both groups for plotting
                                                                                                combined_data <- bind_rows(
                                                                                                  tbi_data %>% mutate(Group = "TBI"),
                                                                                                  control_data %>% mutate(Group = "Control")
                                                                                                )
                                                                                                
                                                                                                
                                                                                                # Convert data to long format for both hemispheres
                                                                                                long_data <- combined_data %>%
                                                                                                  select(ST10CV, all_of(c(significant_SA_vars_right, significant_SA_vars_left)), Group) %>%
                                                                                                  pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                                                                               names_to = "Variable", values_to = "Value") %>%
                                                                                                  mutate(
                                                                                                    Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                                                                                    DescriptiveName = full_names_SA[Variable]
                                                                                                  )
                                                                                                
                                                                                                # ---- Plot for TBI Group ----
                                                                                                p_tbi <- ggplot(long_data %>% filter(Group == "TBI"), 
                                                                                                                aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jittered points for visibility
                                                                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +  # Regression lines
                                                                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                                                                  scale_color_manual(values = c("red", "blue")) +  # Red for Left, Blue for Right
                                                                                                  scale_fill_manual(values = c("red", "blue")) +
                                                                                                  labs(
                                                                                                    title = "Scatterplot of ICV vs. Surface Area (TBI Group)",
                                                                                                    x = "Intracranial Volume (ST10CV)",
                                                                                                    y = "Surface Area Value",
                                                                                                    color = "Hemisphere"
                                                                                                  ) +
                                                                                                  theme_minimal() +
                                                                                                  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                                                                
                                                                                                # ---- Plot for Control Group ----
                                                                                                p_control <- ggplot(long_data %>% filter(Group == "Control"), 
                                                                                                                    aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +
                                                                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +
                                                                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +
                                                                                                  scale_color_manual(values = c("red", "blue")) +
                                                                                                  scale_fill_manual(values = c("red", "blue")) +
                                                                                                  labs(
                                                                                                    title = "Scatterplot of ICV vs. Surface Area (Control Group)",
                                                                                                    x = "Intracranial Volume (ST10CV)",
                                                                                                    y = "Surface Area Value",
                                                                                                    color = "Hemisphere"
                                                                                                  ) +
                                                                                                  theme_minimal() +
                                                                                                  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                                                                
                                                                                                # Print plots
                                                                                                print(p_tbi)
                                                                                                print(p_control)
                                                                                                
                                                                                                
                                                                                                
                                                                                                # Load required libraries
                                                                                                library(tidyverse)
                                                                                                library(broom)
                                                                                                
                                                                                                # Define significant variables
                                                                                                significant_SA_vars_right <- c("ST102SA", "ST105SA", "ST108SA", "ST109SA", "ST110SA", 
                                                                                                                               "ST111SA", "ST114SA", "ST115SA", "ST118SA", "ST121SA", 
                                                                                                                               "ST130SA", "ST87SA")
                                                                                                
                                                                                                significant_SA_vars_left <- c("ST26SA", "ST28SA", "ST31SA", "ST32SA", "ST34SA", 
                                                                                                                              "ST36SA", "ST39SA", "ST40SA", "ST49SA", "ST50SA", 
                                                                                                                              "ST51SA", "ST52SA", "ST54SA", "ST55SA", "ST56SA", 
                                                                                                                              "ST58SA")
                                                                                                
                                                                                                # Map descriptive names to ST codes
                                                                                                full_names_SA <- c(
                                                                                                  "ST102SA" = "Paracentral",
                                                                                                  "ST105SA" = "Pars Orbitalis",
                                                                                                  "ST108SA" = "Postcentral",
                                                                                                  "ST109SA" = "Posterior Cingulate",
                                                                                                  "ST110SA" = "Precentral",
                                                                                                  "ST111SA" = "Precuneus",
                                                                                                  "ST114SA" = "Rostral Middle Frontal",
                                                                                                  "ST115SA" = "Superior Frontal",
                                                                                                  "ST118SA" = "Supramarginal",
                                                                                                  "ST121SA" = "Transverse Temporal",
                                                                                                  "ST130SA" = "Insula",
                                                                                                  "ST26SA" = "Fusiform",
                                                                                                  "ST28SA" = "Hemisphere WM",
                                                                                                  "ST31SA" = "Inferior Parietal",
                                                                                                  "ST32SA" = "Inferior Temporal",
                                                                                                  "ST34SA" = "Isthmus Cingulate",
                                                                                                  "ST36SA" = "Lateral Orbitofrontal",
                                                                                                  "ST39SA" = "Medial Orbitofrontal",
                                                                                                  "ST40SA" = "Middle Temporal",
                                                                                                  "ST49SA" = "Postcentral",
                                                                                                  "ST50SA" = "Posterior Cingulate",
                                                                                                  "ST51SA" = "Precentral",
                                                                                                  "ST52SA" = "Precuneus",
                                                                                                  "ST54SA" = "Rostral Anterior Cingulate",
                                                                                                  "ST55SA" = "Rostral Middle Frontal",
                                                                                                  "ST56SA" = "Superior Frontal",
                                                                                                  "ST58SA" = "Superior Temporal",
                                                                                                  "ST87SA" = "Hemisphere WM"
                                                                                                )
                                                                                                
                                                                                                # Subset dataset for TBI and Control groups
                                                                                                tbi_data <- MichelleProjectclean %>% filter(COHORT == 2)
                                                                                                control_data <- MichelleProjectclean %>% filter(COHORT == 3)
                                                                                                
                                                                                                # Combine both groups
                                                                                                combined_data <- bind_rows(
                                                                                                  tbi_data %>% mutate(Group = "TBI"),
                                                                                                  control_data %>% mutate(Group = "Control")
                                                                                                )
                                                                                                
                                                                                                # Convert Group to a factor (Control as reference)
                                                                                                combined_data <- combined_data %>%
                                                                                                  mutate(Group = factor(Group, levels = c("Control", "TBI")))
                                                                                                
                                                                                                # Ensure required columns exist
                                                                                                required_columns <- c("ST10CV", "Group", significant_SA_vars_right, significant_SA_vars_left)
                                                                                                missing_columns <- setdiff(required_columns, colnames(combined_data))
                                                                                                if (length(missing_columns) > 0) {
                                                                                                  stop(paste("Error: Missing columns in combined_data:", paste(missing_columns, collapse = ", ")))
                                                                                                }
                                                                                                
                                                                                                # Convert data to long format
                                                                                                long_data <- combined_data %>%
                                                                                                  select(all_of(required_columns)) %>%
                                                                                                  pivot_longer(cols = all_of(c(significant_SA_vars_right, significant_SA_vars_left)), 
                                                                                                               names_to = "Variable", values_to = "Value") %>%
                                                                                                  mutate(
                                                                                                    Hemisphere = ifelse(Variable %in% significant_SA_vars_right, "Right", "Left"),
                                                                                                    DescriptiveName = recode(Variable, !!!full_names_SA)  # Proper mapping
                                                                                                  )
                                                                                                
                                                                                                # ---- Regression Analysis ----
                                                                                                # Function to run regression for each surface area variable
                                                                                                run_regression <- function(var) {
                                                                                                  formula <- as.formula(paste(var, "~ ST10CV"))
                                                                                                  model <- lm(formula, data = combined_data)
                                                                                                  return(tidy(model))  # Extract coefficients
                                                                                                }
                                                                                                
                                                                                                # Apply regression to all significant variables
                                                                                                regression_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), 
                                                                                                                              run_regression, .id = "Variable")
                                                                                                
                                                                                                # Print regression results
                                                                                                print(regression_results)
                                                                                                
                                                                                                # ---- Interaction Model (Group as Moderator) ----
                                                                                                interaction_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), function(var) {
                                                                                                  formula <- as.formula(paste(var, "~ ST10CV * Group"))  # Interaction term
                                                                                                  model <- lm(formula, data = combined_data)
                                                                                                  return(tidy(model))
                                                                                                }, .id = "Variable")
                                                                                                
                                                                                                # Print interaction model results
                                                                                                print(interaction_results)
                                                                                                
                                                                                                # ---- Extract R-squared values for interpretation ----
                                                                                                r_squared_results <- map_dfr(c(significant_SA_vars_right, significant_SA_vars_left), function(var) {
                                                                                                  model <- lm(as.formula(paste(var, "~ ST10CV * Group")), data = combined_data)
                                                                                                  tibble(Variable = var, R_squared = summary(model)$r.squared)
                                                                                                })
                                                                                                
                                                                                                # Print R-squared values
                                                                                                print(r_squared_results)
                                                                                                
                                                                                                # ---- Scatterplot of ICV vs. Surface Area ----
                                                                                                p <- ggplot(long_data, aes(x = ST10CV, y = Value, color = Hemisphere)) +
                                                                                                  geom_jitter(alpha = 0.6, size = 1.5, width = 0.3) +  # Jitter for visibility
                                                                                                  geom_smooth(method = "lm", se = TRUE, aes(fill = Hemisphere), alpha = 0.2) +  # Regression
                                                                                                  facet_wrap(~ DescriptiveName, scales = "free_y") +  # Separate panels per variable
                                                                                                  scale_color_manual(values = c("red", "blue")) +  # Red for Left, Blue for Right
                                                                                                  scale_fill_manual(values = c("red", "blue")) +
                                                                                                  labs(
                                                                                                    title = "Scatterplot of ICV vs. Surface Area",
                                                                                                    x = "Intracranial Volume (ST10CV)",
                                                                                                    y = "Surface Area Value",
                                                                                                    color = "Hemisphere"
                                                                                                  ) +
                                                                                                  theme_minimal() +
                                                                                                  theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1))
                                                                                                
                                                                                                # Print plot
                                                                                                print(p)
                                                                                                
                                                                                                
                                                                                                
                                                                                                # Load necessary libraries
                                                                                                library(ggplot2)
                                                                                                library(dplyr)
                                                                                                library(FactoMineR)
                                                                                                library(factoextra)
                                                                                                library(car)
                                                                                                library(reshape2)
                                                                                                
                                                                                                
                                                                                                # Extract **Factor Loadings** from PCA for PC1 (instead of cos2 values)
                                                                                                factor_loadings_TA_tbi <- pca_tbi_TA$var$coord[, "Dim.1"]
                                                                                                factor_loadings_TA_control <- pca_control_TA$var$coord[, "Dim.1"]
                                                                                                
                                                                                                # Map descriptive names (ensure full_names_SA is correctly defined)
                                                                                                names(factor_loadings_TA_tbi) <- full_names_TA[names(factor_loadings_TA_tbi)]
                                                                                                names(factor_loadings_TA_control) <- full_names_TA[names(factor_loadings_TA_control)]
                                                                                                
                                                                                                # Remove NA values
                                                                                                factor_loadings_TA_tbi <- factor_loadings_TA_tbi[!is.na(names(factor_loadings_TA_tbi))]
                                                                                                factor_loadings_TA_control <- factor_loadings_TA_control[!is.na(names(factor_loadings_TA_control))]
                                                                                                
                                                                                                # Combine factor loadings into a dataframe
                                                                                                factor_loadings_comparison_TA <- data.frame(
                                                                                                  Variable = names(factor_loadings_TA_tbi),
                                                                                                  TBI = factor_loadings_TA_tbi,
                                                                                                  Control = factor_loadings_TA_control[names(factor_loadings_TA_tbi)] # Match variables
                                                                                                )
                                                                                                
                                                                                                #  Levene's Test for Variance Homogeneity
                                                                                                levene_data_TA <- stack(data.frame(TBI = factor_loadings_comparison_TA$TBI, Control = factor_loadings_comparison_TA$Control))
                                                                                                colnames(levene_data_TA) <- c("Values", "Group")
                                                                                                levene_result_TA <- leveneTest(Values ~ Group, data = levene_data_TA)
                                                                                                print(levene_result_TA)
                                                                                                
                                                                                                # Box plot for Levene's test results
                                                                                                ggplot(levene_data_TA, aes(x = Group, y = Values, fill = Group)) +
                                                                                                  geom_boxplot(alpha = 0.7) +
                                                                                                  theme_minimal() +
                                                                                                  labs(
                                                                                                    title = "Levene's Test: SA PC1 Factor Loadings Comparison",
                                                                                                    x = "Group",
                                                                                                    y = "Factor Loadings"
                                                                                                  ) +
                                                                                                  theme(legend.position = "none")
                                                                                                
                                                                                                # Scatter Plot with Regression Lines and Outliers
                                                                                                factor_loadings_comparison_TA$Distance <- abs(factor_loadings_comparison_TA$TBI - factor_loadings_comparison_TA$Control) / sqrt(2)
                                                                                                factor_loadings_comparison_TA$z_score <- scale(factor_loadings_comparison_TA$Distance)
                                                                                                
                                                                                                # Identify outliers as points with |z| > 2
                                                                                                outliers_factor_TA <- factor_loadings_comparison_TA[abs(factor_loadings_comparison_TA$z_score) > 2, ]
                                                                                                print(outliers_factor_TA)
                                                                                                View(outliers_factor_TA)
                                                                                                
                                                                                                # Scatter plot visualization
                                                                                                ggplot(factor_loadings_comparison_TA, aes(x = Control, y = TBI)) +
                                                                                                  geom_point(aes(color = Control > TBI), size = 3) +
                                                                                                  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
                                                                                                  geom_smooth(
                                                                                                    data = subset(factor_loadings_comparison_TA, TBI > Control),
                                                                                                    aes(x = Control, y = TBI), method = "lm", color = "blue", se = FALSE
                                                                                                  ) +
                                                                                                  geom_smooth(
                                                                                                    data = subset(factor_loadings_comparison_TA, TBI <= Control),
                                                                                                    aes(x = Control, y = TBI), method = "lm", color = "red", se = FALSE
                                                                                                  ) +
                                                                                                  geom_text(
                                                                                                    data = outliers_factor_TA,
                                                                                                    aes(x = Control, y = TBI, label = Variable),
                                                                                                    nudge_x = 0.02, nudge_y = 0.02,
                                                                                                    size = 3, color = "darkgreen"
                                                                                                  ) +
                                                                                                  labs(
                                                                                                    title = "CT Scatter Plot of Factor Loadings PC1 (TBI vs Control)",
                                                                                                    x = "Factor Loadings Control (PC1)",
                                                                                                    y = "Factor Loadings TBI (PC1)"
                                                                                                  ) +
                                                                                                  scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue"), labels = c("TBI > Control", "Control > TBI")) +
                                                                                                  theme_minimal()
                                                                                                
                                                                                                # Fit regression models and extract R² values
                                                                                                red_points_TA <- factor_loadings_comparison_TA[factor_loadings_comparison_TA$TBI > factor_loadings_comparison_TA$Control, ]
                                                                                                blue_points_TA <- factor_loadings_comparison_TA[factor_loadings_comparison_TA$TBI <= factor_loadings_comparison_TA$Control, ]
                                                                                                
                                                                                                red_model_TA2 <- lm(TBI ~ Control, data = red_points_TA)
                                                                                                blue_model_TA2 <- lm(TBI ~ Control, data = blue_points_TA)
                                                                                                
                                                                                                ggplot(factor_loadings_comparison_TA, aes(x = Control, y = TBI)) +
                                                                                                  geom_point(aes(color = TBI > Control), size = 3) +
                                                                                                  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
                                                                                                  geom_smooth(
                                                                                                    data = subset(factor_loadings_comparison_TA, TBI > Control),
                                                                                                    aes(x = Control, y = TBI), method = "lm", color = "blue", se = FALSE
                                                                                                  ) +
                                                                                                  geom_smooth(
                                                                                                    data = subset(factor_loadings_comparison_TA, TBI <= Control),
                                                                                                    aes(x = Control, y = TBI), method = "lm", color = "red", se = FALSE
                                                                                                  ) +
                                                                                                  geom_text(
                                                                                                    data = outliers_factor_TA,
                                                                                                    aes(x = Control, y = TBI, label = Variable),
                                                                                                    nudge_x = 0.02, nudge_y = 0.02,
                                                                                                    size = 5, color = "darkgreen"
                                                                                                  ) +
                                                                                                  labs(
                                                                                                    title = "Cortical Thickness Scatter Plot of PC1 Factor Loadings PC1",
                                                                                                    x = "Factor Loadings Control (PC1)",
                                                                                                    y = "Factor Loadings TBI (PC1)"
                                                                                                  ) +
                                                                                                  scale_color_manual(
                                                                                                    values = c("TRUE" = "blue", "FALSE" = "red"),
                                                                                                    labels = c("TBI > Control", "Control > TBI")
                                                                                                  ) +
                                                                                                  theme_minimal(base_size = 14) +  # Set base font size for plot
                                                                                                  theme(
                                                                                                    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centered and bold title
                                                                                                    axis.title = element_text(size = 14),  # Axis labels
                                                                                                    axis.text = element_text(size = 12),   # Tick text
                                                                                                    legend.title = element_blank(),        # Remove legend title
                                                                                                    legend.text = element_text(size = 12)  # Legend text size
                                                                                                  )
                                                                                                
                                                                                                
                                                                                                cat("R-squared for Red Points (TBI > Control):", summary(red_model_TA2)$r.squared, "\n")
                                                                                                cat("R-squared for Blue Points (Control > TBI):", summary(blue_model_TA2)$r.squared, "\n")
                                                                                                
                                                                                                # Regression summary for both groups
                                                                                                cat("Regression Summary for Red Points (TBI > Control):\n")
                                                                                                summary(red_model_TA2)
                                                                                                
                                                                                                cat("\nRegression Summary for Blue Points (Control > TBI):\n")
                                                                                                summary(blue_model_TA2)
                                                                                                
                                                                                                
